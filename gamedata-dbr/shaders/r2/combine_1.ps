//TB3D 109993 Adapted from Meltac 2.0 DX11 shaders
#include "common.h"
#ifdef DX11

/* SSAO stuff */
//#define USE_SUPER_SPECULAR
//#define USE_ORIGINAL_SSAO
//#define HBAO_WORLD_JITTER

uniform	sampler2D	s_half_depth;
/* End SSAO stuff */

#include "lmodel.h"
#include "hmodel.h"

/* SSAO stuff */
#ifdef SSAO_COP
//#include "ssao_blur.ps" // Useless.
#include "ssao.ps"
#include "ssao_hbao.ps" // Doesn't work.
#endif
/* End SSAO stuff */

struct         _input      {
        float4         hpos        : POSITION        ;
#ifdef        USE_VTF
          float4         tc0                : TEXCOORD0        ;        // tc.xy, tc.w = tonemap scale
#else
          float2         tc0                : TEXCOORD0        ;        // tc.xy
#endif
	/* SSAO stuff */
	float2	tcJ	: TEXCOORD1;	// jitter coords
	/* End SSAO stuff */
};

struct _out {
float4 low:COLOR0;
float4 high:COLOR1;
};

uniform float4 e_weights;
uniform sampler1D fog_table;
//uniform sampler2D jitter0;

#ifndef USE_F32
	_out main(_input I) 
	{
          // Sample the buffers:
		float4 P=tex2D(s_position,I.tc0);          // position.(mtl or sun)
		float4 N=tex2D(s_normal,I.tc0);            // normal.hemi
		float4 D=tex2D(s_diffuse,I.tc0);           // rgb.gloss
		float4 L=tex2D(s_accumulator,I.tc0);       // diffuse.specular
				
		#ifdef USE_SUPER_SPECULAR	
			float ds=dot(D.rgb,1.h/3.h);
			D.w=max(D.w,ds*ds/8.h);	
		#endif
		#ifdef FORCE_GLOSS
			D.w=FORCE_GLOSS;
		#endif
		#ifdef USE_GAMMA_22
			D.rgb=(D.rgb*D.rgb);
		#endif
		
		#ifdef USE_R2_STATIC_SUN
			float mtl=xmaterial;	
			L+=Ldynamic_color*P.w*2*plight_infinity (mtl,P.xyz,N.xyz,Ldynamic_dir); //float sun_occ=P.w*2;
		#else
			float mtl=P.w;
		#endif
		
		float3 hdiffuse,hspecular;		
		hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
		
		#ifdef SSAO		
			
			float occ = 0;
			
			#ifndef SSAO_COP					
				
				occ = calc_ssao(P,N,I.tc0);				// Use SSAO_LEGACY, SSAO_NEW, or daemonjax' SSAO as defined in common.h		
			
			#else
				#ifdef USE_HBAO			
				occ = calc_hbao(P.z, N, I.tc0);			// HBAO disabled by default - doesn't seem to work.
				#else
				occ = calc_ssao(P, N, I.tc0, I.tcJ);	// Use SSAO ported from CoP.
				#endif
			#endif			
			
			hdiffuse*=occ;
			hspecular*=occ;
			
		#endif
		#ifdef TEX_CONT
			hdiffuse*=((D.rgb*TEX_CONT_COEF)+TEX_CONT_ADD);
		#endif

		float4 C=D*(float4(L.rgb+hdiffuse,L.w));
		float fog=saturate(length(P.xyz)*fog_params.w+fog_params.x); //float distance=length(P.xyz);		
		
		#ifdef DBG_TMAPPING
			float3 color=D.xyz;
		#else
			#ifdef USE_SUPER_SPECULAR
				float3 color=float3((C.rgb*.5h+.5h)*C.w+hspecular)-hspecular; //float3 spec=(C.rgb*.5h+.5h)*C.w+hspecular;
			#else
				float3 color=lerp(float3(C.rgb+float3(C.www+hspecular)),fog_color,fog); //float3 spec=C.www+hspecular;
			#endif
		#endif
		
		#ifdef USE_VTF
			float tm_scale=I.tc0.w;
		#else
			float tm_scale=tex2D(s_tonemap,I.tc0).x;
		#endif
				
		#ifdef SATURATION_FILTER
			float gray=dot(color.xyz,float3(0.3,0.59,0.11));
			color.xyz=lerp(float3(gray,gray,gray),color.xyz,COLOR_SATURATION+(dot(Ldynamic_color.xyz,float3(1,1,1))/3)*COLOR_SAT_SUN_COEF);
		#endif
		
		_out o;		
		tonemap(o.low,o.high,color,tm_scale);
		float skyblend=lerp(0,fog,pow(fog,5));
		o.low.a=skyblend;
		o.high.a=skyblend;
		
		return o;
	}
#else
_out main(_input I)
{
float4 P=tex2D(s_position,I.tc0);
float4 N=tex2D(s_normal,I.tc0);
float4 D=tex2D(s_diffuse,I.tc0);
float4 L=tex2D(s_accumulator,I.tc0);
float F32=1;
#ifdef USE_SUPER_SPECULAR
{
float ds=dot(D.rgb,1.h/3.h);
D.w=max(D.w,ds*ds/8.h);
}
#endif

#ifdef  FORCE_GLOSS
        D.w                =        FORCE_GLOSS                ;
#endif

#ifdef         USE_GAMMA_22
        D.rgb        =        (D.rgb*D.rgb)        ;        // pow(2.2)
#endif

        // static sun
	float mtl 		= P.w;
#ifdef        USE_R2_STATIC_SUN
	float	sun_occ        	=       P.w*2	;
			mtl 			= 		xmaterial;
            L              +=       Ldynamic_color * sun_occ * plight_infinity	(mtl, P.xyz, N.xyz, Ldynamic_dir);
#endif
        // hemisphere
float3 hdiffuse,hspecular;

/* SSAO stuff */
	//  Calculate SSAO
//#ifdef USE_SSAO_BLUR
//	half occ = ssao_blur_ps(I.tc0);
#ifdef USE_HBAO
	float occ = calc_hbao(P.z, N, I.tc0);
#else
	half occ = calc_ssao(P, N, I.tc0, I.tcJ);
#endif
	// End calculate SSAO
/* End SSAO stuff */

hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
#ifdef SSAO_TEX_CONT
hdiffuse*=(D.rgb*0.95+SSAO_CONT_COEF);
#endif
// You need these following two lines if you want to merge this into another shader mod.
hdiffuse*=occ;
hspecular*=occ;
// You need the above two lines if you want to merge this into another shader mod.
#ifndef SSAO
hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
#endif
D.w*=(D.w*mtl);
float4 light=float4((L.rgb*2)+hdiffuse,(L.w*2));
float4 C=D*light;   // rgb.gloss * light(diffuse.specular)
float3 spec=C.www+hspecular*C.rgba*light.a;   // replicated specular
#ifdef USE_SUPER_SPECULAR
spec=(C.rgb*.5h+.5h)*C.w+hspecular;
#endif
float3 color=C.rgb+spec;
        // here should be distance fog
float3 pos=P.xyz;
float distance=length(pos);
float fog=saturate(distance*fog_params.w+fog_params.x);
color=lerp (color,fog_color,fog);
float skyblend=lerp(0,fog,pow(fog,5));
        // final tone-mapping
#ifdef USE_VTF
float tm_scale=I.tc0.w;   // interpolated from VS
#else
float tm_scale=tex2D(s_tonemap,I.tc0).w;
#endif
#ifdef USE_SUPER_SPECULAR
color=spec-hspecular;
#endif
_out o;
tonemap (o.low,o.high,color,tm_scale);
o.low.a=skyblend;
o.high.a=skyblend;
return o;
}
#endif

#else

#include "lmodel.h"
#include "hmodel.h"
struct _input {
float4 hpos:POSITION;
#ifdef USE_VTF
float4 tc0:TEXCOORD0;
#else
float2 tc0:TEXCOORD0;
#endif
};
struct _out {
half4 low:COLOR0;
half4 high:COLOR1;
};
uniform sampler1D fog_table;
#ifndef USE_F32
_out main(_input I) {
float4 P=tex2D(s_position,I.tc0);
half4 N=tex2D(s_normal,I.tc0);
half4 D=tex2D(s_diffuse,I.tc0);
half4 L=tex2D(s_accumulator,I.tc0);
#ifdef USE_SUPER_SPECULAR
{
half ds=dot(D.rgb,1.h/3.h);
D.w=max(D.w,ds*ds/8.h);
}
#endif
#ifdef FORCE_GLOSS
D.w=FORCE_GLOSS;
#endif
#ifdef USE_GAMMA_22
D.rgb=(D.rgb*D.rgb);
#endif
half mtl=P.w;
#ifdef USE_R2_STATIC_SUN
half sun_occ=P.w*2;
mtl=xmaterial;
L+=Ldynamic_color*sun_occ*plight_infinity (mtl,P.xyz,N.xyz,Ldynamic_dir);
#endif
half3 hdiffuse,hspecular;
half occ=calc_ssao(P,N,I.tc0);
hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
#ifdef SSAO_TEX_CONT
hdiffuse*=(D.rgb*0.95+CONT_COEF);
#endif
hdiffuse*=occ;
hspecular*=occ;
#ifndef SSAO
hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
#endif
half4 light=half4(L.rgb+hdiffuse,L.w);
half4 C=D*light;
half3 spec=C.www+hspecular;
#ifdef USE_SUPER_SPECULAR
spec=(C.rgb*.5h+.5h)*C.w+hspecular;
#endif
half3 color=C.rgb+spec;
float3 pos=P.xyz;
float distance=length(pos);
float fog=saturate(distance*fog_params.w+fog_params.x);
color=lerp(color,fog_color,fog);
half skyblend=lerp(0,fog,pow(fog,5));
#ifdef DBG_TMAPPING
color=D.xyz;
#endif
#ifdef USE_VTF
half tm_scale=I.tc0.w;
#else
half tm_scale=tex2D(s_tonemap,I.tc0).x;
#endif
#ifdef USE_SUPER_SPECULAR
color=spec-hspecular;
#endif
#ifdef SATURATION_FILTER
float gray=dot(color.xyz,float3(0.3,0.59,0.11));
color.xyz=lerp(float3(gray,gray,gray),color.xyz,COLOR_SATURATION+(dot(Ldynamic_color.xyz,float3(1,1,1))/3)*COLOR_SAT_SUN_COEF);
float3 maxc=float3(1,0.62,0);
#endif
_out o;
tonemap(o.low,o.high,color,tm_scale);
o.low.a=skyblend;
o.high.a=skyblend;
return o;
}
#else
_out main(_input I)
{
float4 P=tex2D(s_position,I.tc0);
half4 N=tex2D(s_normal,I.tc0);
half4 D=tex2D(s_diffuse,I.tc0);
half4 L=tex2D(s_accumulator,I.tc0);
float F32=1;
#ifdef USE_SUPER_SPECULAR
{
half ds=dot(D.rgb,1.h/3.h);
D.w=max(D.w,ds*ds/8.h);
}
#endif
#ifdef FORCE_GLOSS
D.w=FORCE_GLOSS;
#endif
#ifdef USE_GAMMA_22
D.rgb=(D.rgb*D.rgb);
#endif
half mtl=P.w;
#ifdef USE_R2_STATIC_SUN
half sun_occ=P.w*2;
mtl=xmaterial;
L+=Ldynamic_color*sun_occ*plight_infinity(mtl,P.xyz,N.xyz,Ldynamic_dir);
#endif
half3 hdiffuse,hspecular;
half occ=calc_ssao(P,N,I.tc0);
hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
#ifdef SSAO_TEX_CONT
hdiffuse*=(D.rgb*0.95+CONT_COEF);
#endif
hdiffuse*=occ;
hspecular*=occ;
#ifndef SSAO
hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
#endif
D.w*=(D.w*mtl);
half4 light=half4((L.rgb*2)+hdiffuse,(L.w*2));
half4 C=D*light;
half3 spec=C.www+hspecular*C.rgba*light.a;
#ifdef USE_SUPER_SPECULAR
spec=(C.rgb*.5h+.5h)*C.w+hspecular;
#endif
half3 color=C.rgb+spec;
float3 pos=P.xyz;
float distance=length(pos);
float fog=saturate(distance*fog_params.w+fog_params.x);
color=lerp (color,fog_color,fog);
half skyblend=lerp(0,fog,pow(fog,5));
#ifdef USE_VTF
half tm_scale=I.tc0.w;
#else
half tm_scale=tex2D(s_tonemap,I.tc0).w;
#endif
#ifdef USE_SUPER_SPECULAR
color=spec-hspecular;
#endif
_out o;
tonemap (o.low,o.high,color,tm_scale);
o.low.a=skyblend;
o.high.a=skyblend;
return o;
}
#endif

#endif