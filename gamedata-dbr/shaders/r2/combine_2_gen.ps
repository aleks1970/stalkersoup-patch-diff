//TB3D 109993 Adapted from Meltac 2.0 DX11 shaders, #elif fixed, reworked

#ifdef DX11
////////////////////////// !!!!!!!!!!!!!!!!! MOTION BLUR TEMPORARILY DISABLED TO MAKE SHADER COMPILE !!!!!!!!!!!!!!!!!!!!!!!!!!!!
//#include "mblur.h"

struct v2p
{
  float4 tc0: 		TEXCOORD0;	// Center
  float4 tc1: 		TEXCOORD1;	// LT 		 
  float4 tc2: 		TEXCOORD2;	// RB
  float4 tc3: 		TEXCOORD3;	// RT 
  float4 tc4: 		TEXCOORD4;	// LB
  float4 tc5:		TEXCOORD5;	// Left	/ Right	
  float4 tc6:		TEXCOORD6;	// Top  / Bottom 
};

uniform sampler2D s_distort;
uniform float4 e_barrier;
uniform float4 e_weights;
uniform float4 e_kernel;

uniform float3x4                        m_v2w;

//#include "aa.h"						//// AA TEMPORARILY DISABLED TO MAKE SHADER COMPILE
#include "blur.h"
#include "nightvision.h"
#include "visor.h"
#ifdef VSD
	#include "visordrops.h"
#endif
#ifdef LFX_NAA
	#include "lensflare2.h"
	#define USE_LFX				
#endif
#include "shafts.h"
#ifdef WET
	#include "wet_reflect.h"
	//#include "wet_1.h"
	//#include "wet_2.h"
#endif
//#define THM
#include "infrared.h"
#include "shared\waterconfig.h"

#define EPSDEPTH 0.001

#undef USE_DISTORT


float4 main(v2p I):COLOR {

float4 final = float4(0,0,0,0);
float fov = e_weights.y * 1000;


#ifdef USE_DISTORT
	float depth=tex2D(s_position,I.tc0.xy).z;
	float4 distort=tex2D(s_distort, I.tc0.xy);
	float2 offset=(distort.xy-.5h)*def_distort;
	float2 center=I.tc0.xy+offset;
	float depth_x=tex2D (s_position,center).z;
	if ((depth_x+EPSDEPTH)<depth) center=I.tc0.xy;
#else
	float2 center=I.tc0.xy;
#endif


/* FULLSCREEN INFRARED / TERMAL VISION */	
//#define THM_FULLSCREEN
#ifdef THM_FULLSCREEN
	// CAUTION: NEW LOGIC (see shader_control.script)
	// if (e_barrier.z == 0.69 || e_barrier.z == 0.691)
	// 		return infrared(center.xy, (e_barrier.x == 0.691));
	if (e_barrier.x == 0.59 || e_barrier.z == 0.57)
		return infrared(center.xy, (e_barrier.x == 0.57));
	else if (e_barrier.z == 0.7)									// DEBUG ONLY
		return getmaterial(center.xy);
	else
	{
#endif // NO INFRARED FROM HERE

float4 raw_img=tex2D(s_image,center);
float3 img=raw_img.rgb;
float4 bloom=tex2Dlod(s_bloom,float4(center,0,0));

#ifdef AA
	float3 result = aa(I);
#else
	float3 result = img.rgb;
#endif


float4 centerPos = tex2D(s_position,I.tc0.xy);


////////////////////////// !!!!!!!!!!!!!!!!! MOTION BLUR TEMPORARILY DISABLED TO MAKE SHADER COMPILE !!!!!!!!!!!!!!!!!!!!!!!!!!!!

// #ifdef IMPROVED_MBLUR
// float z=centerPos.z;
// if (z>START_DIST && z<FINAL_DIST) {img=mblur(center,tex2D(s_position,I.tc0.xy).rgb,result);}
// else { img=result;}
// #else
// img=mblur(center,centerPos,result);
// #endif


#ifdef USE_DISTORT
	float3 blurred=bloom.xyz*def_hdr;
	img=lerp(img,blurred,distort.z);
#endif


// DDOF Starts HERE
float2 cent=I.tc0.xy;
float3 sum=tex2D(s_image,cent).rgb;
#ifdef color_dim
	float contrib=3.h;
#else
	#ifdef color_bright
		float contrib=1.h;
	#else
		float contrib=2.h;
	#endif
#endif

float dep=tex2Dlod(s_position,float4(cent.xy,0,0)).z;
if (raw_img.a > DDOF_MAXALPHA) dep = 500;
float origDep = dep;

if (e_weights.z*10 % 2 == 0)
{	
	float mycof=MAXCOF;
	float myMINDIST = MINDIST;
	float myMAXDIST = MAXDIST;
	float myMAXNEAR = MAXNEAR;
	float myMINNEAR = MINNEAR;

	float targetDist = (fov < ZOOM_FOV) ? tex2Dlod(s_position,float4(ZOOM_CENTER,0,0)).z : tex2Dlod(s_position,float4(DDOF_CENTER,0,0)).z;
	float realTargetDist = targetDist;

	if (targetDist <= myMAXNEAR) myMAXNEAR = targetDist;

	#ifdef DDOF
		if (targetDist < MAXDIST && targetDist < DDOF_MAXBARRIER) 
		{
			mycof = DDOF_MAXCOF;
			myMINDIST = targetDist + DDOF_MINDIST_ADD;	
			float maxFactor = (targetDist < DDOF_MAXDIST) ? 1 : (targetDist / DDOF_MAXDIST);
			myMAXDIST = myMINDIST * DDOF_MAXDIST_FACTOR * maxFactor;
		}
	#endif
	
	#ifdef DDOF_DEBUG
		bool debug = true;
		float colorFactor = e_barrier.y * 100;
	#else
		bool debug = false;
		float colorFactor = 0;
	#endif

	if (dep <= myMAXNEAR && dep > myMINNEAR) 
	{
		dep = (1 - (dep-myMINNEAR)/(myMAXNEAR-myMINNEAR) ) * myMAXDIST;
		mycof = MAXCOF_NEAR;
		if (debug && e_barrier.z > 0.7) { img.x *= colorFactor; img.y *= colorFactor; }  // DEBUG YELLOW
	}

	else if (dep > myMAXNEAR && dep < realTargetDist-DDOF_MINDIST_ADD && dep > DDOF_MINDIST)
	{
		
		dep = saturate( 1 - (dep-DDOF_MINDIST)/(realTargetDist-DDOF_MINDIST_ADD-DDOF_MINDIST) )  * MAXDIST;
		
		#ifdef ZOOM_DDOF
			if (fov < ZOOM_FOV)	mycof = DDOF_MAXCOF_NEAR; else mycof = 0;
		#else
			mycof = 0;
		#endif
		
		myMAXDIST = MAXDIST;
		
		if (debug && e_barrier.x == 0.8)
		{
			if (dep > 300) img.x *= colorFactor; // RED
			else if (dep > 200) img.y *= colorFactor; //GREEN
			else if (dep > 100) img.z *= colorFactor; // BLUE
			else if (dep > 50) { img.x *= colorFactor; img.y *= colorFactor; }  // DEBUG YELLOW
			else if (dep > 10) { img.x *= colorFactor; img.z *= colorFactor; }  // DEBUG MAGENTA
			else if (dep > 0)  { img.y *= colorFactor; img.z *= colorFactor; }  // DEBUG CYAN
		}
		
		if (debug && e_barrier.z > 0.8) { img.x *= colorFactor; img.z *= colorFactor; }  // DEBUG MAGENTA
	
	}
	else if (dep > myMAXNEAR && dep < realTargetDist-DDOF_MINDIST_ADD && dep <= DDOF_MINDIST)
	{
		dep = saturate( (dep-myMAXNEAR)/(DDOF_MINDIST-myMAXNEAR) ) * MAXDIST;
		mycof = DDOF_MAXCOF_NEAR;
		myMAXDIST = MAXDIST;
		if (debug && e_barrier.z > 0.9) { img.y *= colorFactor; img.z *= colorFactor; } // DEBUG CYAN
	}

	float blur=pow(saturate((dep-myMINDIST)/(myMAXDIST-myMINDIST)),2);

	if (debug && e_barrier.x == 0.9)
	{
		if (blur > 0.9) img.x *= colorFactor; // RED
		else if (blur > 0.75) img.y *= colorFactor; //GREEN
		else if (blur > 0.5) img.z *= colorFactor; // BLUE
		else if (blur > 0.25) { img.x *= colorFactor; img.y *= colorFactor; }  // DEBUG YELLOW
		else if (blur > 0.1) { img.x *= colorFactor; img.z *= colorFactor; }  // DEBUG MAGENTA
		else if (blur > 0)  { img.y *= colorFactor; img.z *= colorFactor; }  // DEBUG CYAN
	}

	#ifdef CONTRAST_FILTER
		float3 highcontrast=img.xyz*img.xyz;
		img.xyz=lerp(img.xyz,highcontrast,CONTRAST_FILTER_COEF);
	#endif

	#ifdef DOF_CRYSIS
		sum = crysisblur(s_image, cent, mycof * blur * e_barrier.z * 100);				// TODO: FIX OR REMOVE ENTIRELY !!!!!!!!!!!!!!!!!!!!!!!!
		img = sum;
		//contrib += 1;
	#elseif defined(DOF_CLASSIC) // use classic blur algorithm
		float dof_classic_weight = 1;
		if (dof_classic_weight > 0)
		{
			float samples = DOF_QUALITY * DOF_OVERSAMPLING;
			sum = classicblur(cent, sum, mycof * blur * dof_classic_weight, samples);
			contrib += samples;
		}
	#else // use gaussian blur algorithm
		float total_blur=mycof*blur*DOF_CORRECTION;
		float f=0.f;
		float inc=total_blur/DOF_QUALITY;
		for (int i=0;i<DOF_QUALITY;i++){sum+=simpleblur(I,f).rgb;contrib++;f+=inc;}
	#endif
	
}
else
{	
	float fov = e_weights.y * 1000;

	float mycof=ZOOM_MAXCOF;
	float myMINDIST = ZOOM_MINDIST;
	float myMAXDIST = ZOOM_MAXDIST;
	float myNEARMAXDIST = MAXDIST;
	float myMAXNEAR = MAXNEAR;
	float myMINNEAR = MINNEAR;
	float targetDist = tex2D(s_position,ZOOM_CENTER).z; 
	if (targetDist <= myMAXNEAR) myMAXNEAR = targetDist;


	float4 _P=tex2Dproj(s_position,I.tc0);

	float px=_P.x / _P.z;
	float py=_P.y / _P.z;

	float center_dist = sqrt(pow(px, 2) + pow(py, 2));	// absolute distance from screen center
	float dist_factor = center_dist * ZOOM_FACTOR * 1000 / fov; // weighted distance factor

	if (dep < myMAXNEAR && dep > myMINNEAR) 
	{
		dep = (1 - (dep-myMINNEAR)/(myMAXNEAR-myMINNEAR) ) * myNEARMAXDIST;
		mycof = MAXCOF_NEAR;
	}
	else
		dep = dist_factor;

	float blur=pow(saturate((dep-myMINDIST)/(myMAXDIST-myMINDIST)),2);

	if (dep < ZOOM_BARRIER) // debug only
		blur = 0;	

	#ifdef DOF_CLASSIC_ZOOM // use classic blur algorithm
		float dof_classic_weight = 1;
		float2 scale=float2(.5f/1024.f,.5f/768.f)*mycof*blur * dof_classic_weight;
		float2 o [12];
		o[0]=float2(-0.326212f,-0.405810f)*scale;
		o[1]=float2(-0.840144f,-0.073580f)*scale;
		o[2]=float2(-0.695914f,0.457137f)*scale;
		o[3]=float2(-0.203345f,0.620716f)*scale;
		o[4]=float2(0.962340f,-0.194983f)*scale;
		o[5]=float2(0.473434f,-0.480026f)*scale;
		o[6]=float2(0.519456f,0.767022f)*scale;
		o[7]=float2(0.185461f,-0.893124f)*scale;
		o[8]=float2(0.507431f,0.064425f)*scale;
		o[9]=float2(0.896420f,0.412458f)*scale;
		o[10]=float2(-0.321940f,-0.932615f)*scale;
		o[11]=float2(-0.791559f,-0.597710f)*scale;
		for (int i=0;i<DOF_QUALITY;i++)
		{
			float2 tap=cent+o[i];
			float3 tap_color=tex2D(s_image,tap).rgb;
			sum+=tap_color;
			contrib++;
		}
	#else // use gaussian blur algorithm
		float total_blur=mycof*blur*DOF_CORRECTION;
		float f=0.f;
		float inc=total_blur/DOF_QUALITY;
		for (int i=0;i<DOF_QUALITY;i++){sum+=simpleblur(I,f);contrib++;f+=inc;}
	#endif
}				//e_weights

#ifdef DEPTH_OF_FIELD
	//not implemented yet
#endif

	img += (sum/contrib);

	// Combine the pre-final image (including mblur, ddof, etc. - but prior to adding post process effects)
	final = combine_bloom(img,bloom)-tex2Dlod(s_image,float4(I.tc0.xy,0,0));
	
	/****************************/
	/* POST PROCESSING EFFECTS: */
	/****************************/
	
	/* WET SURFACES */		
	#ifdef WET
		float kernel_amount = 0;
		bool indoor_wet = false;
		bool indoor_ref = false;
		float wet_amount = 0;
		float rain_density	= 0;			
		#ifndef WET_ZOOM
		if (e_weights.z*10 % 2 == 0)		
		#else
		if (true)
		#endif
		{				
			if (e_kernel.x < 0.4)		{ kernel_amount = (e_kernel.x-0.3); }
			else if (e_kernel.x < 0.5)	{ kernel_amount = (e_kernel.x-0.4); indoor_ref=true; }
			else						{ kernel_amount = (e_kernel.x-0.5); indoor_wet=true; }		
			wet_amount = round(kernel_amount*10000.f)/10000.f;
			rain_density = (kernel_amount-wet_amount)*100000.f;		// CAUTION: WHY ONE DIGIT MORE THAN IN WEATHER_CONTROL.SCRIPT ???
			wet_amount *= 10.f;
			float2 reflection_uv = I.tc0.xy;
			float water_height = 0;						
			float4 wet_final   = wetreflect(final, reflection_uv, wet_amount, rain_density, water_height, indoor_wet, indoor_ref);     // TODO: CHECK WHETHER *10 IS CORRECT			
			float wet_dist_cof = 1-saturate( (origDep-WET_FADEMIN)/(WET_FADEMAX-WET_FADEMIN) );
			final = lerp(final,wet_final,wet_dist_cof);
			#ifdef WET_ADVANCEDBLUR
			if (final.a == 0.1)			// apply blur only if current pixel is wet // TODO: OPTIMIZE CODE TO COMPILE FASTER!!!
			{
				float blur = 10; // (e_kernel.x-0.4) * 1000 => 0.41
				float wet_factor = WET_BLUR; // (e_kernel.x-0.4) * 100 => 0.41
				float4 b1  = checkwet(float2(I.tc0.x-blur*WET_FX, I.tc0.y-blur*WET_FY), false);
				float4 b2  = checkwet(float2(I.tc0.x+blur*WET_FX, I.tc0.y-blur*WET_FY), false);
				float4 b3  = checkwet(float2(I.tc0.x-blur*WET_FX, I.tc0.y+blur*WET_FY), false);
				float4 b4  = checkwet(float2(I.tc0.x+blur*WET_FX, I.tc0.y+blur*WET_FY), false);
				float wet = saturate( (1.1 - (b1.a+b2.a+b3.a+b4.a)/4) * wet_factor );
				final = (1-wet) * tex2Dlod(s_image, float4(I.tc0.xy,0,0)) + wet * final;
			}
			#endif		
		}
		#ifdef WET_DEBUG
		}
		#endif
	#endif		//wet

	// We need to calculate the screen-space sun position anyway
	float3 sundir_w = L_sun_dir_w;
	float4 sunpos = screen_sunpos_diff(sundir_w, screen_sunpos(sundir_w), false);	
		
	/* SUN SHAFTS */		
	#ifdef SSH	
		#ifndef SSH_ZOOM
			if (e_weights.z*10 % 2 == 0)
		#else
			if (true)
		#endif
	{	
		if (e_weights.z*10 <= 1)
		{
			float4 shafts = float4(0,0,0,0);
			shafts = shaft(center, sunpos, sundir_w, 1);
			final = (final + shafts) / 2.f;	
		}
	}
	#endif			//SSH
	
//#ifdef DX11
	/* LENS FLARES */	
	#ifdef LFX_NAA	
		#define LFX_SPOTS 8 		// Number of light sources
		#define LFX_FX 3			// Number of simultaneously rendered flares
		if (e_weights.z*10 > 1)		// TODO: REPLACE BY LEVEL CHECK / ARRAY !
		{
			float3 spots[LFX_SPOTS];
			spots[0] = float3(-107.98,-11,-71.25);
			spots[1] = float3(-106.03,-11,-59.59);
			spots[2] = float3(-101.81,-11,-48.74);	
			spots[3] = float3(-69.600001,-1.58,-123.4001);	
			spots[4] = float3(-83.99,-13.0,-99.75);
			spots[5] = float3(-71.87,-4.37,-111.25);			// causes lfx not being rendered because not checking view angle in loop / checks below !!!!!!!!!!
			//spots[5] = float3(-771.87,-774.37,-7111.25);
			spots[6] = float3(-102.37,-12.85,-102.33);
			spots[7] = float3(-74.07,-16.36,-117.60);
			//spots[8] = float3(-102.37,-13,-102.33);
			float4 mosts[LFX_FX];
			mosts[0] = float4(0,0,0,100);
			mosts[1] = float4(0,0,0,100);
			mosts[2] = float4(0,0,0,100);
			float eye_spot_dist = 100; 
			// TODO: Add view angle (dot) check and/or occlusion check BEFORE judging which light sources to take just by distance !!!!!!!!!!!!!
			for (int s = 0; s < LFX_SPOTS; s++)
			{
				eye_spot_dist = distance(eye_position.xyz, spots[s].xyz);
				if (eye_spot_dist < 100)
				{
					for (int m = 0; m < LFX_FX; m++)
					{
						if (eye_spot_dist < mosts[m].w)
						{
							if ( (m+1) < LFX_FX)
							{
								mosts[m+1] = mosts[m];
							}
							mosts[m] = float4(spots[s], eye_spot_dist);					
							break;
						}
					}
				}
			}
			for (int l = 0; l < LFX_FX; l++)
			{
				final = lensfx(center, final, mosts[l].xyz, 0.035);
			}
		}
	#endif		//LFX_NAA
	/* END LENS FLARES */			
//#endif			//DX11

	/* SATURATION */
	#ifdef FORCED_SATURATION_FILTER
		float gray=dot(final.xyz,float3(0.3,0.59,0.11));
		final.xyz=lerp(float3(gray,gray,gray),final.xyz,COLOR_SATURATION+(dot(Ldynamic_color.xyz,float3(1,1,1))/3)*COLOR_SAT_SUN_COEF);
	#endif	
	
	
	/* VISOR REFLECTIONS */
	if (e_weights.x > 0.99)
	{
		final = visor_reflect(center, final, origDep);
	}	

	
	/* NIGHTVISION SCOPES / BINOC */	
	//#undef NV_FULLSCREEN
	// Use nightvision if either zoom NV or fullscreen NV is enabled	
	#ifdef NV
		#define NV_ENABLED
	#else
		#ifdef NV_FULLSCREEN
			#define NV_ENABLED
		#endif
	#endif		
	#ifdef NV_ENABLED	
		if (e_barrier.x > 0.f && (e_weights.z*10 % 2 > 0) ) // show NV only when red color amount > 0 and zooming
		{	
			float3 nv_color = 0;
			nv_color.x = floor(e_barrier.x*100.f)/100.f;
			nv_color.y = floor((e_barrier.x-nv_color.x)*10000.f)/100.f;
			nv_color.z = floor((e_barrier.x-nv_color.x-(nv_color.y/100.f))*1000000.f)/100.f;		
			
			final = nv(I, final, float3(nv_color.x, nv_color.y, nv_color.z), nv_color.x == 0.25);				
		}	
	#endif		
	
	/* VISOR DROPS - ONLY IF WET SURFACES ENABLED */
	#ifdef VSD
		#ifdef WET		
		if (e_weights.x > 0.99)
		{
			final = visor_drops(center, raw_img, final, sunpos.xyz, L_sun_dir_e.xyz, wet_amount);
		}	
		#endif
	#endif
	
	/* END OF POST-PROCESSING */
	return final;
}
#endif
