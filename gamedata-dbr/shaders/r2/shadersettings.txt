// TB3D 1.0.9.9.8.2 balanced for in-game HDR controls and DDOF, simple optimization options, redefined, ddof, in game mblur slider,
// adj sun and now default to standard smap, f32, sun saturation
//////////////////////////////////////////////////////////////////
// Adapted from: DYNAMIC DEPTH OF FIELD SHADERS 1.02 - By Meltac
// Base shaders: STALKER Shaders MAX 1.02 - By Kingo64
#ifndef SSM_Mount
#define SSM_Mount
// Set used DirectX version - use only when running Meltac's custom DirectX binaries!
#define DX11	

//////////////////////////////////////////////////////////////////
//== NOTE: <<< >>> indicates a warning message - options are for advanced users ==//
//==========================  TB3D easy options ==================================//
//== Feature Enable/Disable: Add // to disable, Remove the // to enable.
//== performance options
//==    normal: shadow mask 960, advanced features on
//== NOTE: the semi option is only valid with optimized option

	//#define optimized				//turns off advanced features and reduces others
	//#define semi_optimized		//less aggressive, valid only with optimized option

//== pick one of two alternate color styles here
//== default = nuetral color and natural sunlight, unless overridden by one of next two choices

	//#define color_bright		//enhanced colors, bright sun
	//#define color_dim			//washed out colors, dim sun

//== MORE ADVANCED OPTIONS ==================================================-=====//
//==  Enables Screen Space Ambient Occlusion <<<for Object Dynamic Lighting>>>

	//#define SSAO			// <<<Causes lines in full dynamic lighting>>>
	
//== shadow map size default = 960, <<<larger maps tend to become blockish>>>
//== best if half of screen resolution, engine default usually best

	// MM2.0 Shadow resolution:   NOTE:  You will STILL have to use the -smapXXXX switch on your shortcut to the game executable, where XXXX = CUSTOM_SHADOW_RESOLUTION!!!	
	#define KERNEL float(1.6) 					// IMPORTANT For custom shadow resolution... Minimum recommended values: 1024 = .6, 2048 = 1.2, 4096 = 2.4, etc... Higher values produce softer shadows.
	#define XKERNEL float(1.6) 					// Probably should be same as KERNEL!	
	#define CUSTOM_SHADOW_RESOLUTION int(2048) 	// M2.0

//== Depth of Field default = DDOF <<<use only one, DDOF auto switches between classic and gauss via TB3D_Shaders.script>>>
	#define DDOF					// (blurring coefficient = MAXCOF) - uses r2_aa_kernel to adjust the mix, 0.3 = full classic; 0.7 = full gaussian
	//#define DOF_CLASSIC			// Use classic blur algorithm, as implemented by Sky4Ace
	//#define DOF_GAUSSIAN			// Use simple gaussian blur algorithm (blurs stronger with same MAXCOF value)
	//#define DOF_CLASSIC_ZOOM					//M2.0  Same as above but for zoom mode
	#define DOF_CORRECTION float (2.0)			//M2.0  Factor to equalize the amount of gaussian to classic blur. Default is 2.0.
	//#define DOF_CRYSIS						//M2.0  Enables modified/simplied blur effect ported from Crysis 2. CAUTION: Highly computationally expensive! Default is disabled.

//== NON - STANDARD MOTION BLUR ===================================================//
	// Blur methods - USE_MBLUR must be on to use improved or sky4ce methods
	// if none defined then uses vanilla blur method, <<<must be selected in advanced game menu as well>>>
	
	#define USE_MBLUR			// Enables Motion Blur # This forces Motion Blur on like -mblur. Adjust the blur amount with MBLUR_COEF later in this script.
	//#define IMPROVED_MBLUR	// Use distance-depending Motion Blur - Adjust START_DIST and FINAL_DIST to your needs. 
	//#define SKY4CE_MBLUR 		// <<<breaks Motion Blur and Anti-Aliasing>>>

	//============ put here seperate as causes washout of shadows ======================//
//== <<<Only noticable on Full Dynamic Lighting>>> <<<causes poor performance on some computers>>>
//== supposed to make the environment much brighter and natural, does not in my tests.

	//#define SUN_SHAFTS		// Enables Sun Shafts (god rays) - <<<breaks sun shadows>>>
	#define SSH					// Enable/disable Meltac's 2.0 Sun shafts 

//==!!!!! legacy graphics card support, see end of file for more h/w options !!!!!!!!//
//== use on old pre DX10.1 cards only, <<<may cause excess heat in newer cards>>>
//== if you see artifacting, fan labors consistantly or power supply whines then
//== turn off immediately or damage WILL occur (my EVGA dual 260 watercooled died in 12 minutes)

	//#define USE_F32			// Enables Float32 mod. <<<Breaks saturation and contrast filters>>>
	//#define USE_F32_FOG		// Enables Float32 style fog. <<<Requires Float32 to be enabled>>>

//============================ end TB3D options =====================================//

	//World effects
#ifdef optimized
	#define SATURATION_FILTER	// Enables Saturation Filter, giving a grey like appearance to areas which are "unsafe".
	#define CONTRAST_FILTER		// Enables Contrast Filter, giving a grey like appearance to areas which are "unsafe".
#ifdef semi_optimized
	#define DEPTH_OF_FIELD 		// Enables Depth Of Field   # Blurs objects in the distance
	#define PARALLAX_OCCLUSION	// Enables Parallax Occlusion Mapping  # Makes surfaces look bumpy and 3d at the cost of fps. Worth it
#endif
#else
	#define DEPTH_OF_FIELD 		// Enables Depth Of Field   # Blurs objects in the distance
	#define PARALLAX_OCCLUSION	// Enables Parallax Occlusion Mapping  # Makes surfaces look bumpy and 3d at the cost of fps. Worth it
	#define USE_SUNMASK			// Enables sun shadow masking, smooths shadows but darkens world overall.
	//#define USE_SJITTER			// Uses shadow jittering, smooths shadows of flashlight <<<causes grainy textures>>>
	#define USE_SJITTER_SUN		// M2.0 Uses shadow jittering for shadows created by the sun/moon, a modern method of smoothing out shadow edges. Highly recommended.
	#define USE_SJITTER_OTHER   // M2.0 Enables shadow jittering (4 samples) for dynamic lights (e.g. flashlight/campfires).  Recommended.
	//#define SATURATION_FILTER	// Enables Saturation Filter, giving a grey like appearance to areas which are "unsafe" <<<dims colors>>>.
	//#define CONTRAST_FILTER		// Enables Contrast Filter, giving a grey like appearance to areas which are "unsafe" <<<dims world>>>.
#endif


//////////////////////////////////////////////////////////////
//Depth Of Field
//////////////////////////////////////////////////////////////

	//Basic options:
#ifdef optimized
#ifdef semi_optimized
	#define DOF_QUALITY int(9)	//Amount of DOF samples. Maximum value is 12.
#else
	#define DOF_QUALITY int(6)	//Amount of DOF samples. Maximum value is 12.
#endif
#else
	#define DOF_QUALITY int(12)	//Amount of DOF samples. Maximum value is 12.
#endif

	//Distance Options:
	#define MINDIST float(15.0)				// M2.0 was 0.6 Minimum distance DOF starts. Default is 0.4.  // TWILIGHT KET USES 15
	#define MAXDIST float(275)				// M2.0 was 375 Distance at which DOF stops rendering. Default is 375
	#define MAXCOF	float(2.5)				// M2.0 was 4.0 Blur amount - if using DDOF, <<<this should not differ too much from DDOF_MAXCOF>>> (I use same value)
	
	#define DOF_CORRECTION float (6.0)		// Factor to equalize the amount of gaussian to classic blur. Don't change this unless you know what you're doing.
	
	// Oversampling for better quality (not really improving much, but making game startup slower - use at your own risk)
	//#define DOF_OVERSAMPLING int(1)			// oversampling ratio. Default is 1.
	
	// Near Field DOF (see also Dynamic DOF, because the effects are interfering!)	
	#define MAXNEAR float(0.7)			// Distance at which Near Field DOF starts. Default is 0.7. Larger values will blur your weapon more, and not only its near part.
	#define MINNEAR float(0.0)			// Distance at which Near Field DOF stops. Default is 0.0
#ifdef ddof
	#define MAXCOF_NEAR float(15.0)			// Near Field blur amount. Interferes heavily with DDOF if less than 15.
#else
	#define MAXCOF_NEAR float(7.0)			// Near Field blur amount. Default = 7.0 without DDOF.
#endif
	
	// Zoom DOF
	#define ZOOM_MINDIST float(15.0)	        // Minimum distance (radius) from screen center where DOF starts.
	#define ZOOM_MAXDIST float(260.0)			// Distance radius from screen center at which DOF stops rendering (beyond that value - full blur). 
	#define ZOOM_MAXCOF float(80.0)				// Blur amount at the screen border while zooming.
	#define ZOOM_FACTOR float(10.0)				// The stepness of the blur amount raising from center to border. Good values are 10-12.
	
	// Dynamic DOF
	#define DDOF_MINDIST_ADD float(0.7)			// Added to view distance, at this distance begins blurring
	#define DDOF_MAXDIST_FACTOR float(4.0)		// Mindist times factor = maxdist
	#define DDOF_MINDIST float(0.0)				// Minimum distance DDOF starts.
	#define DDOF_MAXDIST float(10.0)			// Distance at which DOF stops rendering. Beyond this view distance, only minor DDOF
	#define DDOF_MAXCOF	float(4.0)				// DDOF blur factor - good balanced is value 2.0 - 5.0 - see also MAXCOF
	
//////////////////////////////////////////////////////////////
//Anti-Aliasing (does not really work well, use at your own risk; at the moment, non-zoom mode only)
//////////////////////////////////////////////////////////////

	// Basic options:
	//#define AA
	#define AA_KERNEL  float(100.0) // PS: 0.5	

	#define AA_BARRIER_X float(0.800000)
	#define AA_BARRIER_Y float(0.500000)
	#define AA_BARRIER_Z float(0.000000)
	
	#define AA_WEIGHTS_X float(0.250000)
	#define AA_WEIGHTS_Y float(0.250000)
	#define AA_WEIGHTS_Z float(0.000000)

//////////////////////////////////////////////////////////////
//Parallax Occlusion Mapping
//////////////////////////////////////////////////////////////

	//Basic options:
#ifdef optimized
#ifdef semi_optimized
	#define MAX_SAMPLES int(20)	                //Maximum amount of samples done to a texture.
#else
	#define MAX_SAMPLES int(10)	                //Maximum amount of samples done to a texture.
#endif
#else
	#define MAX_SAMPLES int(40)	                //Maximum amount of samples done to a texture.
#endif
	#define MIN_SAMPLES int(4)	                //Minimum amount of samples done to a texture.
	#define PARALLAX_OFFSET float(0.0137)	//Height of surface per sample.
	#define FINAL_INTERSECTION_LOOPS int(5)	//Amount of additional samples to increase accuracy.

	//Performance Options:
#ifndef optimized
	//#define PARALLAX_FADE			//Parllax textures fade back to regular normals with distance; increases FPS and fixes anisotropic filtering. #Disabling this strangely gave me a much higher FPS.
#endif
	#define START_FADE float(0.0003)	//Distance the fading starts
	#define STOP_FADE float(0.0004)   //Distance the fading stops, and the texture returns to just using normals.

//== Use texture height maps instead of generating them
//== Requires special textures (81mb) <<<do not use if you are running low on RAM or get 'Out of Memory' errors>>>
	//#define USE_TEXTURE_PACK		// Textures will look flat if they don't contain a heightmap
	
//== Other Options:

//	#define CORRECT_PERSPECTIVE		// <<<WARNING!!! artifacts will appear if defined>>>
	#define CONTRAST_COEF_Q1 float(0.6)	//Amount of contrast in calculations.
	#define CONTRAST_COEF_Q2 float(1)	//Amount of contrast in calculations.
#ifdef USE_SUNMASK
	#define BRIGHTNESS_COEF float(0.5)	//Amount of brightness in calculations.
#else
	#define BRIGHTNESS_COEF float(0.497)	//Amount of brightness in calculations.
#endif
//////////////////////////////////////////////////////////////
//Screen Space Ambient Occlusion
//////////////////////////////////////////////////////////////

	//Basic options:
#ifdef optimized
#ifdef semi_optimized
	#define SSAO_TEX_CONT		//Increase texture contrast for diffuse lighting   # This line makes SSAO much darker. If it is too dark add a // to the start of the line or increase the value on the line below.
#endif
	#define SSAO_QUALITY int(2) 	//Amount of SSAO samples. Use 2 for low quality and 3 for high quality. 0 and 1 are invalid. #The only noticable difference is the framerate :P
#else
	#define SSAO_TEX_CONT		//Increase texture contrast for diffuse lighting   # This line makes SSAO much darker. If it is too dark add a // to the start of the line or increase the value on the line below.
	#define SSAO_QUALITY int(3) 	//Amount of SSAO samples. Use 2 for low quality and 3 for high quality. 0 and 1 are invalid. #The only noticable difference is the framerate :P
#endif
	#define CONT_COEF float(0.5)	//Brightness increase amount

	//required for pre v1.1 shaders.
	#define FADE_DIST float(2.6)
	#define FADE_COEF float(0.2)

//////////////////////////////////////////////////////////////
//Sun Shafts, only valid if sun_shafts declared above
//////////////////////////////////////////////////////////////

	//Basic options:
#ifdef optimized
#ifdef semi_optimized
	#define RAY_SAMPLES int(15)	//Amount of sun ray samples. The higher this is, the better the quality and the lower your framerate.
#else
	#define RAY_SAMPLES int(10)	//Amount of sun ray samples. The higher this is, the better the quality and the lower your framerate.
#endif
#else
	#define RAY_SAMPLES int(20)	//Amount of sun ray samples. The higher this is, the better the quality and the lower your framerate.
#endif
	#define SS_INTENSITY float(1.0)	// intesity of sun shafts

//////////////////////////////////////////////////////////////
//== <<<required for v1.1 shader support>>>
//////////////////////////////////////////////////////////////

	#define SS_CONTRAST float(0.15)				//Amount of contrast during sunray calculation, too high causes glossy faces.
	#define ZOOM_BARRIER float(10.0)			// Distance from the screen center at which blurring starts, in relative pixels.

//////////////////////////////////////////////////////////////
//== Only for testing.
//////////////////////////////////////////////////////////////
//	#define SS_FARNEARLERP	// # Seemed to give me more FPS but caused massive sun errors. Leave it disabled.

//////////////////////////////////////////////////////////////
//Motion Blur
//////////////////////////////////////////////////////////////

	//Basic options:
	#define MBLUR_SAMPLES int(20)	// Quality(Intensity)

	//Details:
	#define SCALE_X float(-0.03) // Velocity ratio X
	#define SCALE_Y float(0.03) // Velocity ratio Y
	#define START_DIST float(1.0) // Interpolation start distance
	#define FINAL_DIST float(300.0) // Interpolation end distance
	#define VEL_START float(0.001) //Velocity softening at start distance - default is 0.009, but I consider this value too high
	#define VEL_FIN float(0.02) //Velocity softening at end distance
	#define IMB_CLAMP float(0.01) //Motion Blur Ratio Clamp
	

#ifdef USE_MBLUR
	#define MBLUR_COEF float2(1.0,0.0)	// Meltac: Use this instead of the "r2_mblur" setting in the console to define the motion blur amount
#endif

//////////////////////////////////////////////////////////////
//Saturation and Contrast
//////////////////////////////////////////////////////////////

	//Basic options:
#ifdef color_bright
	#define COLOR_SATURATION float(0.6)		//hue intensity. 0 is no color (Black and White), 1 is full color
#ifdef use_f32
	#define COLOR_SAT_SUN_COEF float(0.43)		//How much influence sun lighting has on the saturation.
#else
	#define COLOR_SAT_SUN_COEF float(0.5)		//How much influence sun lighting has on the saturation.
#endif
	#define CONTRAST_FILTER_COEF float(0.03)	//ratio of full screen contrast.
#else
#ifdef color_dim
	#define COLOR_SATURATION float(0.4)		//hue intensity. 0 is no color (Black and White), 1 is full color
#ifdef use_f32
	#define COLOR_SAT_SUN_COEF float(0.43)		//How much influence sun lighting has on the saturation.
#else
	#define COLOR_SAT_SUN_COEF float(0.5)		//How much influence sun lighting has on the saturation.
#endif
	#define CONTRAST_FILTER_COEF float(0.03)	//ratio of full screen contrast.
#else //nuetral
	#define COLOR_SATURATION float(0.5)		//hue intensity. 0 is no color (Black and White), 1 is full color
#ifdef use_f32
	#define COLOR_SAT_SUN_COEF float(0.43)		//How much influence sun lighting has on the saturation.
#else
	#define COLOR_SAT_SUN_COEF float(0.5)		//How much influence sun lighting has on the saturation.
#endif
	#define CONTRAST_FILTER_COEF float(0.03)	//ratio of full screen contrast.
#endif
#endif
//////////////////////////////////////////////////////////////
//Float32 v2.0
//////////////////////////////////////////////////////////////

	//Basic options:
	#define CT_int 1.25f		//Cook Tolerance of the sun.
	#define CT_int_in 1.25f	//Cook Tolerance of indoor lighting.
	#define BLOOM_val 0.6h	//Bloom brightness - Increases HDR brightness of the sky
	#define HDR_int 10.h	//HDR cutoff - Total HDR brightness


//////////////////////////////
//Forced Settings - Debug
//////////////////////////////
//RADEON COMPATIBILITY MODE - For those who can not use Fetch4 or have issues! Not needed on most modern GPUs.
//#define NO_F4

// #define SUN_FILTER			// World sun through objects <<<crashes when entering sid's bunker>>>
// #define USE_GAMMA_22
// #define USE_SUNFILTER
// #define USE_HWSMAP
// #define USE_HWSMAP_PCF	// nVidia GF3+, R600+
// #define USE_BRANCHING
// #define USE_VTF		// VertexTextureFetch
// #define FP16_FILTER
// #define FP16_BLEND
// #define USE_PARALLAX
// #define USE_TDETAIL
// #define USE_LM_HEMI
// #define USE_DISTORT
// #define DBG_TMAPPING

#endif
