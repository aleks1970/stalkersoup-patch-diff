--TB3D 1.0.9.9.1 centralized create_level_changer, new Collector 12/05/11
function my_ver() return "1.0.9.9.1" end

-- Table teleports
-- art - art required for teleportation (if specified - will take away HS)
-- keep - whether to leave the teleporter
-- goto_func - list of options of getting to teleport
local teleports = {
	["device_teleport"] = {
		art = "af_electra_moonlight",
		sjedobniy = true,
		goto_func = {
			"exit_agroprom",
			"exit_agroprom2",
			"exit_agroprom3",
			"exit_as",
			"exit_as2",
			"exit_as3",
			"exit_as4",
			"exit_bar",
			"exit_bar2",
			"exit_bar3",
			"exit_bar4",
			"exit_bar5",
			"exit_bar6",
			"exit_bar7",
			"exit_bunker",
			"exit_dt1",
			"exit_dt2",
			"exit_dt3",
			"exit_dt4",
			"exit_dt5",
			"exit_dt6",
			"exit_dt7",
			"exit_dt8",
			"exit_dt9",
			"exit_dt10",
			"exit_dt11",
			"exit_kordon",
			"exit_kordon2",
			"exit_kordon3",
			"exit_kordon4",
			"exit_kordon5",
			"exit_kordon6",
			"exit_kordon7",
			"exit_kordon8",
			"exit_kordon9",
			"exit_kordon10",
			"exit_kordon11",
			"exit_kordon12",
			"exit_kordon13",
			"exit_kordon14",
			"exit_kordon15",
			"exit_pripyat",
			"exit_pripyat2",
			"exit_radar",
			"exit_radar2",
			"exit_radar3",
			"exit_radar4",
			"exit_svalka",
			"exit_svalka2",
			"exit_svalka3",
			"exit_svalka4",
			"exit_svalka5",
			"exit_svalka6",
			"exit_svalka7",
			"exit_svalka8",
			"exit_svalka9",
			"exit_svalka10",
			"exit_svalka11",
			"exit_svalka12",
			"exit_td",
			"exit_td2",
			"exit_undergraund",
			"exit_x18",
			"exit_yantar1",
			"exit_yantar2",
			"exit_yantar3",
			"exit_yantar4",
			"exit_yantar5",
			"exit_yantar6",
			"exit_yantar7",
			"exit_yantar8",
			"exit_yantar9",
			"exit_yantar10",
			"exit_yantar11"
		}
	},
	["science_teleport3"] = {
		art = "af_electra_moonlight",
		sjedobniy = true,
		goto_func = {
			"exit_yantar1",
			"exit_yantar2",
			"exit_yantar3",
			"exit_yantar4",
			"exit_yantar5",
			"exit_yantar6",
			"exit_yantar7",
			"exit_yantar8",
			"exit_yantar9",
			"exit_yantar10",
			"exit_yantar11"
		}
	},
	["science_teleport2"] = {
		art = "af_electra_moonlight",
		sjedobniy = true,
		goto_func = {
			"exit_bar",
			"exit_bar2",
			"exit_bar3",
			"exit_bar4",
			"exit_bar5",
			"exit_bar6",
			"exit_bar7"
		}
	},
	["science_teleport"] = {
		art = "af_electra_moonlight",
		sjedobniy = true,
		goto_func = {
			"exit_kordon",
			"exit_kordon2",
			"exit_kordon3",
			"exit_kordon4",
			"exit_kordon5",
			"exit_kordon6",
			"exit_kordon7",
			"exit_kordon8",
			"exit_kordon9",
			"exit_kordon10",
			"exit_kordon11",
			"exit_kordon12",
			"exit_kordon13",
			"exit_kordon14",
			"exit_kordon15"
		}
	},
	["arhara_tele"] = {
		--keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_to_stancia21"
		}
	},
	["snotvornoe_tele"] = {
		--keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_peshera"
		}
	},
	["shaxter_tele"] = {
		--keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_peshera1"
		}
	},
	--new Collector -------------------------
["dav_htd_rft"] = {
		keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_redf_htd"
		}
	},
	["dav_htd_npp"] = {
		keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_nppt_htd"
		}
	},
	["dav_htd_lmk"] = {
		keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_limk_htd"
		}
	},	
	-- end new -----------------------------------
	["arhara_obman"] = {
		keep = true,
		sjedobniy = true,
		goto_func = {
			"exit_as21"
		}
	}
}

function checking_droped_obj(obj)
	local actor = db.actor
	local obj_sect = obj:section()
	if not teleports[obj_sect] then return end -- not our "client"
	-- If art is not needed or it is at the HS
	if not teleports[obj_sect].art or actor:object(teleports[obj_sect].art) then
		-- send a teleport to the examination
		-- know not whether he ate or put in nychku
		local tbl		= {}
		tbl.obj_id		= obj:id()
		tbl.obj_sect	= obj_sect
		-- amk.start_timer("timer_drop_obj_teleport", 0.2, amk.pack_array_to_string(tbl))
		amk.start_timer("timer_drop_obj_teleport", 0.2, tbl)
	end
	--[[checking_droped_item(obj)
	checking_droped_item2(obj)
	checking_droped_item3(obj)
	checking_droped_item4(obj)
	checking_droped_item5(obj)
	checking_droped_item6(obj)
	checking_droped_item7(obj)
	checking_droped_item8(obj)
	checking_droped_item11(obj)
	checking_droped_item12(obj)
	checking_droped_item13(obj)
	checking_droped_item14(obj)
	checking_droped_item10(obj)]]
end

function teleport_start(obj_sect, obj_id, sjeli)
	local sim = alife()
	local actor = db.actor
	if sjeli and teleports[obj_sect].sjedobniy or 
		not sjeli and not teleports[obj_sect].sjedobniy then
	-- call a random function for the teleport
	-- teleports[obj_sect].goto_func[math.random(#(teleports[obj_sect].goto_func))]()
		TB3D_Services.teleportate(teleports[obj_sect].goto_func[math.random(#(teleports[obj_sect].goto_func))])
	-- we select the art in HS, if you want to select
		if teleports[obj_sect].art then
			local art = actor:object(teleports[obj_sect].art)
			if art then
				local se_art = sim:object(art:id())
				if se_art then
					sim:release(se_art)
				end
			end
		end
	
		-- remove teleport, unless told to leave or have not eaten / used
		if not teleports[obj_sect].keep and not teleports[obj_sect].sjedobniy then
			sim:release(sim:object(obj_id))
		elseif teleports[obj_sect].keep and teleports[obj_sect].sjedobniy then -- Teleport back to the pack
			amk.spawn_item_in_inv(obj_sect)
		end
	end
end





