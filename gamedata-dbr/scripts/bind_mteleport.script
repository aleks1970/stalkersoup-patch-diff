-- TB3D 1.0.9.9.7.0 use_binder_message 
function my_ver() return "1.0.9.9.7.0" end
-- ************************************************
-- **                    Imp                     **
-- **         Binder improvised teleports        **
-- **  Supports the work of self-made teleports  **
-- ************************************************

local teleport_binders ={}	-- List of Teleport

function abs_comp(a,b)
	-- Utility function calculating the difference
	if( a < b) then
		return (b - a)
	else
		return (a - b)
	end
end

function teleportate(x,y,z)
	-- The function of teleportation
	local a = vector()
	-- Set the coordinates
	a.x = x
	a.y = y
	a.z = z
	-- Itself teleportation
	db.actor:set_actor_position(a)
	-- Soundtrack
	local snd_obj = xr_sound.get_safe_sound_object([[anomaly\teleport_work_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function actor_update(delta)
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("mteleport: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."]")
	end
	local actor_pos,s
	-- Obtain the position of the actor (that-be every time do not ask)
	actor_pos = db.actor:position()
	-- Check our teleports
	local obj
	for i, v in pairs(teleport_binders) do
		s = v.parametrs
		obj = level.object_by_id( i )
		if obj ~= nil then
		-- Our teleporter online check on
			if s.teleporte ~= nil and s.teleporte ~= false then
				-- Teleport launched
				if ( time_global() <= s.time ) then
					-- If the time allotted to the show spetsefektov
					-- passed, produce teleportation
					teleportate(s.poz_x,s.poz_y,s.poz_z)
					if s.rotate ~= nil then
						db.actor:set_actor_direction(s.rotate)
					end
					s.teleporte = false
				end
				return
			end
			-- Poroverim not strayed, an actor in our teleport
			if (abs_comp(s.x, actor_pos.x)< v.parametrs.radius  and
			    abs_comp(s.z, actor_pos.z)< v.parametrs.radius  and
			    abs_comp(s.y, actor_pos.y)< v.parametrs.z_radius) then
				-- Actor in the area of the teleport, run teleport
				s["teleporte"] = true
				s["time"] = time_global() + 500
				-- Run spetsefektov teleportation
				level.add_pp_effector ("teleport.ppe", 2006, false)
			end
		end
	end
	if TB3D_Modders.Global_Debug then 
		TB3D_Services.packet_alert("mteleport: update done")
	end
end

function bind( obj )
	if TB3D_Modders.use_binder_message then TB3D_Services.packet_alert("bind mteleport: bind["..utils.to_str(obj:name()).."] section["..obj:section().."]") end
	obj:bind_object( restrictor_teleport( obj ) ) 
end

----------------------------------------------------------------------------------------------------
class "restrictor_teleport" ( object_binder )

function restrictor_teleport:__init(obj, char_ini) super(obj)
end

function restrictor_teleport:net_spawn(data)
	local char_ini = system_ini()
	-- If this is the teleport then enter it into the special list of teleports unless deleted
	local s_obj = alife():object(self.object:id())
	if s_obj then
		if self.teleport == true then
			teleport_binders[self.object:id()] = self
			-- Complete the table settings
			self["parametrs"] = {}
			if char_ini:line_exist(self.section, "radius") then
				self.parametrs["radius"] = tonumber(char_ini:r_string(self.section, "radius"))
			else
				self.parametrs["radius"] = 2 --Credit default radius of xy
			end
			if char_ini:line_exist(self.section, "z_radius") then
				self.parametrs["z_radius"] = tonumber(char_ini:r_string(self.section, "z_radius"))
			else
				self.parametrs["z_radius"] = self.parametrs["radius"] -- if the radius of the height is not specified it is set to the radius of the xy
			end
			-- Remember the position that-be every time except for
			self.parametrs["x"] = tonumber(s_obj.position.x);
			self.parametrs["y"] = tonumber(s_obj.position.y);
			self.parametrs["z"] = tonumber(s_obj.position.z);
			-- Remember the coordinates to teleport
			self.parametrs["poz_x"] = tonumber(char_ini:r_string(self.section, "poz_x"))
			self.parametrs["poz_y"] = tonumber(char_ini:r_string(self.section, "poz_y"))
			self.parametrs["poz_z"] = tonumber(char_ini:r_string(self.section, "poz_z"))
			if char_ini:line_exist(self.section, "rotate") then
				self.parametrs["rotate"] = tonumber(char_ini:r_string(self.section, "rotate"))
			end
		end
		return true
	end
	return false
end

function restrictor_teleport:net_destroy()
	-- Remove our teleport
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bind mteleport: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
	teleport_binders[self.object:id()] = nil
	self.parametrs = nil
	object_binder.net_destroy(self)
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bind mteleport: net destroy["..utils.to_str(self.object:name()).."] done") end
end

function restrictor_teleport:reload(section)
	local char_ini = system_ini()
	self.section = section
	-- If it is then teleport
	if char_ini ~= nil and char_ini:line_exist(self.section, "teleport") then
		self["teleport"] = true
	end
end

