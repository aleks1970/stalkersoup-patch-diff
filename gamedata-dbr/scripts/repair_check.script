--TB3D 1.0.9.9.4.4	added upgrade lines 522-541
function my_ver() return "1.0.9.9.4.4" end
-- Advanced Trader Weapon Repair v.1.1

-- Basic functions by AMK Team, advanced functions by Black 777 Team (Wlad777 and BlackyBPG)
--------------------------------------------------------------------------------------------------------

-- rewritten and added to the horseradish by RAY

local weapon_profit_margin = 4
local armor_profit_margin = 4
local rem_name
local rem_ubit_stvol_1 = 0
local rem_ubit_stvol_2 = 0
local is_perv = 0
local is_vtor = 0

local is_upgr_kalibr = false          -- weapons available to change the caliber
local is_upgr_otdaca = false   -- weapons available to upgrade the recoil
local is_upgr_ves = false   -- weapons available for weight loss
local nomer_massiva = 0


-- array of "comparable" barrels, rules, themselves, made from noodle for tests

local wpnA = { "wpn_val", "wpn_vintorez", "wpn_vsk94", "wpn_ak9" }
local wpnB = { "wpn_spas", "wpn_winche", "wpn_m4super90", "wpn_protecta", "wpn_protecta_col", "wpn_benelli_short", "wpn_m590", "wpn_rem870short", "wpn_remington870", "wpn_rem870_magnum", "wpn_w1200", "wpn_toz194", "wpn_usas12", "wpn_xm1014" }
local wpnC = { "wpn_bm16", "wpn_toz34", "wpn_toz34_short", "hunters_toz", "wpn_browningauto5" }
local wpnD = { "wpn_raging_bull", "wpn_anaconda" }
local wpnE = { "wpn_samopal" }
local wpnF = { "wpn_kriss_super", "wpn_kriss_waper_pro" }
local wpnG = { "wpn_ak47", "wpn_pkm", "wpn_akm", "wpn_aks47", "wpn_rpd", "wpn_sks_s", "wpn_ak203" }
local wpnH = { "wpn_ak74", "wpn_aks74m", "wpn_groza", "wpn_bizon", "wpn_bizon1", "wpn_ak108", "wpn_ak104", "wpn_taktik", "wpn_ak101", "wpn_rpk74_sk1", "wpn_aks74u", "wpn_fnc", "wpn_vz58", "wpn_aek971_kollim" }
local wpnI = { "wpn_abakan", "wpn_an94_sniper" }
local wpnJ = { "wpn_famas", "wpn_tavor", "wpn_fw900k", "wpn_type97", "wpn_kac_pdw" }
local wpnK = { "wpn_p90", "wpn_zastava" }
local wpnL = { "wpn_g36", "wpn_xm8", "wpn_mg36_sk1", "wpn_g36aimpoint" }
local wpnM = { "wpn_mg42", "wpn_m_134", "wpn_minigun_m134", "wpn_pkm_tactic", "wpn_ptrd" }
local wpnN = { "wpn_l85", "wpn_l86", "wpn_aug_a"}
local wpnO = { "wpn_lr300", "wpn_m16a", "wpn_m4", "wpn_hk417", "wpn_sr25", "wpn_hkm4c", "wpn_c1", "wpn_hk416", "wpn_c7a1", "wpn_sbr" }
local wpnP = { "wpn_sig550", "wpn_sg552", "wpn_sig_m1", "wpn_scar", "wpn_g3c", "wpn_masada", "wpn_scar_cry", "wpn_scar_new", "wpn_sg552_sk1"}
local wpnQ = { "wpn_saiga12c", "wpn_saigataktik1", "wpn_saigataktik2", "wpn_sayga12k" }
local wpnR = { "wpn_ppsh41", "wpn_ppd40_sk1", "wpn_thompson", "wpn_mp40", "wpn_mauser" }
local wpnS = { "wpn_mp5", "wpn_mp7", "wpn_uzi", "wpn_scorpion", "wpn_smg_tmp", "wpn_microuzi", "wpn_klin", "wpn_mac10", "wpn_hk53", "wpn_ump45", "pn_pp2000" }
local wpnT = { "wpn_svd", "wpn_svu", "wpn_awm", "wpn_b94", "wpn_vihlop", "wpn_m1891_30_scope", "wpn_mosin1891", "wpn_walther_wa2000", "wpn_obrez", "wpn_m76", "wpn_m14", "wpn_m82", "wpn_msg90", "wpn_ksvk", "wpn_trg42", "wpn_awp", "wpn_m21", "wpn_r700", "wpn_m21_mw2", "wpn_wa2000_mw2" }
local wpnU = { "wpn_flame" }
local wpnV = { "wpn_gungauss", "wpn_gauss", "wpn_dark_gauss", "wpn_gauss_krayzis", "wpn_gaussrifle" }
local wpnW = { "wpn_crossbow", "wpn_crossbow_m1" }
local wpnX = { "wpn_fn2000", "wpn_fn2000_old", "wpn_fn2000_sniper", "wpn_oicw" }
local wpnY = { "wpn_rg6", "wpn_rg-6", "wpn_m79" }
local wpnZ = { "wpn_rpg", "wpn_igla" }

local wpn1 = { "wpn_beretta", "wpn_hpsa", "wpn_walther", "wpn_m8000", "wpn_px4", "wpn_m93r", "wpn_glock", "wpn_p7", "wpn_p18", "wpn_sig226", "wpn_ppk", "wpn_mk22", "wpn_tec9", "wpn_beretta_stars"}
local wpn2 = { "wpn_colt",  "wpn_desert_eagle", "wpn_eagle", "wpn_deagle_mk19", "wpn_desert_eagle_uniq", "wpn_desert_eagle_new", "wpn_sig220", "wpn_usp", "wpn_g35", "wpn_fs"}                 
local wpn3 = { "wpn_aps", "wpn_fort", "wpn_pb", "wpn_pm", "wpn_pmx1", "wpn_pm_m1", "wpn_pm_m2", "wpn_tt33_sk1", "wpn_mp444", "wpn_ots33" }
local wpn_temp



-- Initial (original trunks). Available to change the caliber
local wpn_to_upgrade_kalibr_5_45 = {"wpn_ak74", "wpn_aks74m", "wpn_ak74u", "wpn_abakan"}
local wpn_to_upgrade_kalibr_9_18 = {"wpn_bizon", "wpn_scorpion"}
local wpn_to_upgrade_kalibr_9_19 = {"wpn_mp5", "wpn_mp7a3", "wpn_uzi", "wpn_mp5k"}
local wpn_to_upgrade_kalibr_5_56 = {"wpn_fn2000", "wpn_g36", "wpn_lr300", "wpn_sig550", "wpn_sg552_sk1", "wpn_l85", "wpn_famas_p3_sk1", "wpn_m16a2_sk1", "wpn_tavor", "wpn_m4"}

-- Trunks with a modified caliber
local wpn_with_upgrade_kalibr_5_45 = {"wpn_ak74_kalibr", "wpn_aks74m_kalibr", "wpn_ak74u_kalibr", "wpn_abakan_kalibr"}
local wpn_with_upgrade_kalibr_9_18 = {"wpn_bizon_kalibr", "wpn_scorpion_kalibr"}
local wpn_with_upgrade_kalibr_9_19 = {"wpn_mp5_kalibr", "wpn_mp7a3_kalibr", "wpn_uzi_kalibr", "wpn_mp5k_kalibr"}
local wpn_with_upgrade_kalibr_5_56 = {"wpn_fn2000_kalibr", "wpn_g36_kalibr", "wpn_lr300_kalibr", "wpn_sig550_kalibr", "wpn_sg552_sk1_kalibr", "wpn_l85_kalibr", "wpn_famas_p3_sk1_kalibr", "wpn_m16a2_sk1_kalibr", "wpn_tavor_kalibr", "wpn_m4_kalibr"}

-- Initial (original trunks). Available to reduce recoil.
local wpn_to_upgrade_otdaca = {"wpn_ak74", "wpn_aks74m", "wpn_ak74u", "wpn_abakan", "wpn_bizon", "wpn_mp5", "wpn_mp7a3", "wpn_uzi", "wpn_fn2000", "wpn_g36", "wpn_lr300", "wpn_sig550", "wpn_sg552_sk1", "wpn_l85", "wpn_famas_p3_sk1", "wpn_m16a2_sk1", "wpn_tavor", "wpn_ak47", "wpn_hk417_sk1", "wpn_sr25_mk11_mod0_sk1", "wpn_m4", "wpn_mp5k", "wpn_scorpion" }

-- Trunks with a reduced-impact (complete upgrade)
local wpn_with_upgrade_otdaca = {"wpn_ak74_otdaca", "wpn_aks74m_otdaca", "wpn_ak74u_otdaca", "wpn_abakan_otdaca", "wpn_bizon_otdaca", "wpn_mp5_otdaca", "wpn_mp7a3_otdaca", "wpn_uzi_otdaca", "wpn_fn2000_otdaca", "wpn_g36_otdaca", "wpn_lr300_otdaca", "wpn_sig550_otdaca", "wpn_sg552_sk1_otdaca", "wpn_l85_otdaca", "wpn_famas_p3_sk1_otdaca", "wpn_m16a2_sk1_otdaca", "wpn_tavor_otdaca", "wpn_ak47_otdaca", "wpn_hk417_sk1_otdaca", "wpn_sr25_mk11_mod0_sk1_otdaca", "wpn_m4_otdaca", "wpn_mp5k_otdaca", "wpn_scorpion_otdaca"}

-- Initial (original trunks). Available to reduce weight
local wpn_to_upgrade_ves = {"wpn_ak74_kalibr", "wpn_aks74m_kalibr", "wpn_ak74u_kalibr", "wpn_abakan_kalibr", "wpn_bizon_kalibr", "wpn_mp5_kalibr", "wpn_mp7a3_kalibr", "wpn_uzi_kalibr", "wpn_fn2000_kalibr", "wpn_g36_kalibr", "wpn_lr300_kalibr", "wpn_sig550_kalibr", "wpn_sg552_sk1_kalibr", "wpn_l85_kalibr", "wpn_famas_p3_sk1_kalibr", "wpn_m16a2_sk1_kalibr", "wpn_tavor_kalibr", "wpn_ak74_otdaca", "wpn_aks74m_otdaca", "wpn_ak74u_otdaca", "wpn_abakan_otdaca", "wpn_bizon_otdaca", "wpn_mp5_otdaca", "wpn_mp7a3_otdaca", "wpn_uzi_otdaca", "wpn_fn2000_otdaca", "wpn_g36_otdaca", "wpn_lr300_otdaca", "wpn_sig550_otdaca", "wpn_sg552_sk1_otdaca", "wpn_l85_otdaca", "wpn_famas_p3_sk1_otdaca", "wpn_m16a2_sk1_otdaca", "wpn_tavor_otdaca", "wpn_ak47_otdaca", "wpn_hk417_sk1_otdaca", "wpn_sr25_mk11_mod0_sk1_otdaca", "wpn_ak74", "wpn_ak74u", "wpn_abakan", "wpn_bizon", "wpn_mp5", "wpn_mp7a3", "wpn_uzi", "wpn_fn2000", "wpn_g36", "wpn_lr300", "wpn_sig550", "wpn_sg552_sk1", "wpn_l85", "wpn_famas_p3_sk1", "wpn_m16a2_sk1", "wpn_tavor", "wpn_ak47", "wpn_hk417_sk1", "wpn_sr25_mk11_mod0_sk1", "wpn_groza", "wpn_val", "wpn_svd", "wpn_svu", "wpn_m1891_30_scope", "wpn_vintorez", "wpn_b94", "wpn_awm", "wpn_saiga12c", "wpn_spas12", "wpn_wincheaster1300", "wpn_bm16", "wpn_toz34", "wpn_ppsh41_sk2", "wpn_kriss_super_v", "wpn_p90", "wpn_pkm", "wpn_m4", "wpn_m4_kalibr", "wpn_m4_otdaca", "wpn_m4super90", "wpn_m79", "wpn_mp5k", "wpn_mp5k_kalibr", "wpn_mp5k_otdaca", "wpn_protecta", "wpn_scorpion", "wpn_scorpion_kalibr", "wpn_scorpion_otdaca", "wpn_aks74m"}

-- Trunks with a reduced-impact (complete upgrade)
local wpn_with_upgrade_ves = {"wpn_ak74_kalibr_ves", "wpn_aks74m_kalibr_ves", "wpn_ak74u_kalibr_ves", "wpn_abakan_kalibr_ves", "wpn_bizon_kalibr_ves", "wpn_mp5_kalibr_ves", "wpn_mp7a3_kalibr_ves", "wpn_uzi_kalibr_ves", "wpn_fn2000_kalibr_ves", "wpn_g36_kalibr_ves", "wpn_lr300_kalibr_ves", "wpn_sig550_kalibr_ves", "wpn_sg552_sk1_kalibr_ves", "wpn_l85_kalibr_ves", "wpn_famas_p3_sk1_kalibr_ves", "wpn_m16a2_sk1_kalibr_ves", "wpn_tavor_kalibr_ves", "wpn_ak74_otdaca_ves", "wpn_aks74m_otdaca_ves", "wpn_ak74u_otdaca_ves", "wpn_abakan_otdaca_ves", "wpn_bizon_otdaca_ves", "wpn_mp5_otdaca_ves", "wpn_mp7a3_otdaca_ves", "wpn_uzi_otdaca_ves", "wpn_fn2000_otdaca_ves", "wpn_g36_otdaca_ves", "wpn_lr300_otdaca_ves", "wpn_sig550_otdaca_ves", "wpn_sg552_sk1_otdaca_ves", "wpn_l85_otdaca_ves", "wpn_famas_p3_sk1_otdaca_ves", "wpn_m16a2_sk1_otdaca_ves", "wpn_tavor_otdaca_ves", "wpn_ak47_otdaca_ves", "wpn_hk417_sk1_otdaca_ves", "wpn_sr25_mk11_mod0_sk1_otdaca_ves", "wpn_ak74_ves", "wpn_ak74u_ves", "wpn_abakan_ves", "wpn_bizon_ves", "wpn_mp5_ves", "wpn_mp7a3_ves", "wpn_uzi_ves", "wpn_fn2000_ves", "wpn_g36_ves", "wpn_lr300_ves", "wpn_sig550_ves", "wpn_sg552_sk1_ves", "wpn_l85_ves", "wpn_famas_p3_sk1_ves", "wpn_m16a2_sk1_ves", "wpn_tavor_ves", "wpn_ak47_ves", "wpn_hk417_sk1_ves", "wpn_sr25_mk11_mod0_sk1_ves", "wpn_groza_ves", "wpn_val_ves", "wpn_svd_ves", "wpn_svu_ves", "wpn_m1891_30_scope_ves", "wpn_vintorez_ves", "wpn_b94_ves", "wpn_awm_ves", "wpn_saiga12c_ves", "wpn_spas12_ves", "wpn_wincheaster1300_ves", "wpn_bm16_ves", "wpn_toz34_ves", "wpn_ppsh41_sk2_ves", "wpn_kriss_super_v_ves", "wpn_p90_ves", "wpn_pkm_ves", "wpn_m4_ves", "wpn_m4_kalibr_ves", "wpn_m4_otdaca_ves", "wpn_m4super90_ves", "wpn_m79_ves", "wpn_mp5k_ves", "wpn_mp5k_kalibr_ves", "wpn_mp5k_otdaca_ves", "wpn_protecta_ves", "wpn_scorpion_ves", "wpn_scorpion_kalibr_ves", "wpn_scorpion_otdaca_ves", "wpn_aks74m_ves"}


 

-- the name of the repairman in sms

repairmaster = {
		hnd_weap_01  = { "Sidorovich" },
		hnd_weap_02  = { "Dan" },
		hnd_weap_03  = { "Syak" },
		hnd_weap_04  = { "Lanky" },
		hnd_weap_05  = { "Barkeep" },
		hnd_weap_06  = { "Vasily" },
		hnd_weap_07  = { "Professor Sakharov" }
}

local wpnsec=nil
local stcode=0
local check_sec = 0
local tmpcode = 0
local recheck
local tt = 0.5


-- repairers and koofitsienty "navara" 1=Variablenname; 2=weapon_profit_margin; 3=armor_profit_margin

local repairmasterlist = {
	escape_trader			= {"hnd_weap_01",2.2,3.0},
	escape_trader_zombie	= {"hnd_weap_01",1.7,1.5},
	marsh_dan				= {"hnd_weap_02",4,4},
	Sak					= {"hnd_weap_03",2.0,3.5},
	dolgovazyi			= {"hnd_weap_04",1.8,3.0},
	bar_barman			= {"hnd_weap_05",1.6,1.5},
	bar_barman_zombi		= {"hnd_weap_05",1.6,1.5},
	marsh_remont	          = {"hnd_weap_06",2.1,1.9},
--	mil_Svoboda_trader       = {"hnd_weap_06",2.1,1.9},
	yan_general_ecolog		= {"hnd_weap_07",1.8,1.7},
	yan_general_ecolog_zombi= {"hnd_weap_07",1.8,1.7}
}



-- and whether an upgrade is possible?

function trader_upgrade_precond(actor, trader)
	nomer_massiva = 0
	wpnsec=nil
	stcode=0
	local var = repairmasterlist[trader:name()][1]
	get_vars(var)
	if stcode>=1 and wpnsec~=nil then 
		return false 
	end

	local item_in_slot_1 = db.actor:item_in_slot(1)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	if (item_in_slot_1 ~= nil) then 
		return true
	elseif (item_in_slot_2 ~= nil) then 
		return true
	else 
		return false
	end	 



--	if (item_in_slot_1 ~= nil) and (0.96 < item_in_slot_1:condition() + 0.01) then 
--		return true
--	elseif (item_in_slot_2 ~= nil) and (0.96 < item_in_slot_2:condition() + 0.01) then 
--		return true
--	else 
--		return false
--	end	 
end

-- whether it is possible to change the caliber weapons

function is_upgrade_kalibr(wpn)
	nomer_massiva = 0
	 j=table.getn(wpn_to_upgrade_kalibr_5_45) 
	for i=1,j do
		 if wpn == wpn_to_upgrade_kalibr_5_45[i] then
			nomer_massiva = 1
			return wpn_with_upgrade_kalibr_5_45[i]
		 end
	 end
	 j=table.getn(wpn_to_upgrade_kalibr_9_18) 
	for i=1,j do
		 if wpn == wpn_to_upgrade_kalibr_9_18[i] then
			nomer_massiva = 2
			return wpn_with_upgrade_kalibr_9_18[i]
		 end
	 end
	 j=table.getn(wpn_to_upgrade_kalibr_9_19) 
	for i=1,j do
		 if wpn == wpn_to_upgrade_kalibr_9_19[i] then
			nomer_massiva = 3
			return wpn_with_upgrade_kalibr_9_19[i]
		 end
	 end
	 j=table.getn(wpn_to_upgrade_kalibr_5_56) 
	for i=1,j do
		 if wpn == wpn_to_upgrade_kalibr_5_56[i] then
			nomer_massiva = 4
			return wpn_with_upgrade_kalibr_5_56[i]
		 end
	 end
	return nil
end

-- is it possible to increase the accuracy of Arms

function is_upgrade_otdaca(wpn)
	 j=table.getn(wpn_to_upgrade_otdaca) 
	for i=1,j do
		 if wpn == wpn_to_upgrade_otdaca[i] then
			return wpn_with_upgrade_otdaca[i]
		 end
	 end
	return nil
end

-- whether arms to reduce weight

function is_upgrade_ves(wpn)
	 j=table.getn(wpn_to_upgrade_ves) 
	for i=1,j do
		 if wpn == wpn_to_upgrade_ves[i] then
			return wpn_with_upgrade_ves[i]
		 end
	 end
	return nil
end

function is_upgrade_1st_stvol_kalibr(actor, trader)
	local item_in_slot_1 = db.actor:item_in_slot(1)
	local wep_flag = nil
	if item_in_slot_1 ~= nil then
		wep_flag =  is_upgrade_kalibr(item_in_slot_1:section())
			
		if wep_flag == nil  then
			return false
		end
		return true
	end
	return false
end

function is_upgrade_1st_stvol_otdaca(actor, trader)
	local item_in_slot_1 = db.actor:item_in_slot(1)
	local wep_flag = nil
	if item_in_slot_1 ~= nil then
		wep_flag =  is_upgrade_otdaca(item_in_slot_1:section())
			
		if wep_flag == nil  then
			return false
		end
		return true
	end
	return false
end

function is_upgrade_1st_stvol_ves(actor, trader)
	local item_in_slot_1 = db.actor:item_in_slot(1)
	local wep_flag = nil
	if item_in_slot_1 ~= nil then
		wep_1 =  is_upgrade_ves(item_in_slot_1:section())
			
		if wep_1 == nil  then
			return false
		end
		return true
	end
	return false
end

function is_upgrade_1st_stvol_all_precond(actor, trader)
	local a1 =  is_upgrade_1st_stvol_kalibr(actor, trader)
	local a2 =  is_upgrade_1st_stvol_otdaca(actor, trader)
	local a3 =  is_upgrade_1st_stvol_ves(actor, trader)
	if a1 or a2 or a3 then
		return true
	end
	return false
end


function is_upgrade_2st_stvol_kalibr(actor, trader)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	local wep_flag = nil
	if item_in_slot_2 ~= nil then
		wep_1 =  is_upgrade_kalibr(item_in_slot_2:section())
			
		if wep_1 == nil  then
			return false
		end
		return true
	end
	return false
end

function is_upgrade_2st_stvol_otdaca(actor, trader)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	local wep_flag = nil
	if item_in_slot_2 ~= nil then
		wep_1 =  is_upgrade_otdaca(item_in_slot_2:section())
			
		if wep_1 == nil  then
			return false
		end
		return true
	end
	return false
end
function is_upgrade_2st_stvol_ves(actor, trader)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	local wep_flag = nil
	if item_in_slot_2 ~= nil then
		wep_1 =  is_upgrade_ves(item_in_slot_2:section())
			
		if wep_1 == nil  then
			return false
		end
		return true
	end
	return false
end

function is_upgrade_2st_stvol_all_precond(actor, trader)
	local a1 =  is_upgrade_2st_stvol_kalibr(actor, trader)
	local a2 =  is_upgrade_2st_stvol_otdaca(actor, trader)
	local a3 =  is_upgrade_2st_stvol_ves(actor, trader)
	if a1 or a2 or a3 then
		return true
	end
	return false
end

-- HS show options and upgrade cost

function upgrade_costs(trader, actor, first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")

	local str_text_1 = nil
	local str_text_2 = nil

	if db.actor ~= nil then 
		local item_in_slot_1 = db.actor:item_in_slot(1)
		local item_in_slot_2 = db.actor:item_in_slot(2)

		if item_in_slot_1 ~= nil then
			local wep_1 =  is_upgrade_kalibr(item_in_slot_1:section())
			local wep_2 =  is_upgrade_otdaca(item_in_slot_1:section())
			local wep_3 =  is_upgrade_ves(item_in_slot_1:section())
			local item_upgr_cost1 = math.floor( item_in_slot_1:cost() * 2 )
			local name1 = read_string_if_exist(system_ini(),item_in_slot_1:section(),"inv_name",nil)
			
			if wep_1 == nil and wep_2 == nil and wep_3 == nil then
				news_manager.give_talk_message("So, in regards to your sidearm "..game.translate_string(name1)..". I can't repair it..."   , task_texture, task_rect, "iconed_trade_info")
			elseif (0.96 >= item_in_slot_1:condition() + 0.01) then
				news_manager.give_talk_message("So, in regards to your sidearm   "..game.translate_string(name1)..". It appears to be slightly damaged - I shall not undertake any work on it. Repair it yourself first, and then I can upgrade it." , task_texture, task_rect, "iconed_trade_info")
			else
				str_text_1 = "So, in regards to your sidearm "..game.translate_string(name1)..". I can offer you the following upgrades:"
				if wep_1 ~= nil then
					if (nomer_massiva == 1) and (db.actor:money() >= item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 5.45x39mm to 5.56x45mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost1.." rubles%c[default]."
					elseif (nomer_massiva == 1) and (db.actor:money() < item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 5.45x39mm to 5.56x45mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost1.." rubles%c[default], but, you don't appear to have the money.."
					elseif (nomer_massiva == 2) and (db.actor:money() >= item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 9x18mm to 9x19mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost1.." rubles%c[default]."
					elseif (nomer_massiva == 2) and (db.actor:money() < item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 9x18mm to 9x19mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost1.." rubles%c[default], but, you don't appear to have the money.."
					elseif (nomer_massiva == 3) and (db.actor:money() >= item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 9x19mm to 9x18mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost1.." rubles%c[default]."
					elseif (nomer_massiva == 3) and (db.actor:money() < item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 9x19mm to 9x18mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost1.." rubles%c[default], but, you don't appear to have the money.."
					elseif (nomer_massiva == 4) and (db.actor:money() >= item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 5.56x45mm to 5.45x39mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost1.." rubles%c[default]."
					elseif (nomer_massiva == 4) and (db.actor:money() < item_upgr_cost1) then
						str_text_1 = str_text_1.."\\n   - Change the calibre from 5.56x45mm to 5.45x39mm .. It would cost you\\n%c[255,255,32,23]"..item_upgr_cost1.." rubles%c[default], but, you don't appear to have the money.."
					end
				end
				if (wep_2 ~= nil) and (db.actor:money() >= item_upgr_cost1) then
					str_text_1 = str_text_1.."\\n   - Increased accuracy ..  It will cost %c[255,238,155,23]"..item_upgr_cost1.." rubles%c[default]."
				elseif (wep_2 ~= nil) and (db.actor:money() < item_upgr_cost1) then
					str_text_1 = str_text_1.."\\n   - Increased accuracy ..  It would cost you \\n%c[255,255,32,23]"..item_upgr_cost1.." rubles%c[default], but, you don't appear to have the money.."
				end
				if (wep_3 ~= nil) and (db.actor:money() >= item_upgr_cost1) then
					str_text_1 = str_text_1.."\\n   - Reduce the weight ..  It will cost %c[255,238,155,23]"..item_upgr_cost1.." rubles%c[default]."
				elseif (wep_3 ~= nil) and (db.actor:money() < item_upgr_cost1) then
					str_text_1 = str_text_1.."\\n   - Reduce the weight ..  It would cost you \\n%c[255,255,32,23]"..item_upgr_cost1.." rubles%c[default], but, you don't appear to have the money.."
				end
			end

			if str_text_1 ~= nil then
				news_manager.give_talk_message(str_text_1 , task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_2 ~= nil then
			local wep_1 =  is_upgrade_kalibr(item_in_slot_2:section())
			local wep_2 =  is_upgrade_otdaca(item_in_slot_2:section())
			local wep_3 =  is_upgrade_ves(item_in_slot_2:section())
			local item_upgr_cost2 = math.floor( item_in_slot_2:cost() * 2 )
			local name2 = read_string_if_exist(system_ini(),item_in_slot_2:section(),"inv_name",nil)
			
			if wep_1 == nil and wep_2 == nil and wep_3 == nil then
				get_console():execute("1")

				news_manager.give_talk_message("Ah, in regards to your primary weapon  "..game.translate_string(name2)..". I cannot repair it.."   , task_texture, task_rect, "iconed_trade_info")
			elseif (0.96 >= item_in_slot_2:condition() + 0.01) then
				news_manager.give_talk_message("Ah, in regards to your primary weapon "..game.translate_string(name2)..". It appears to be slightly damaged - I shall not undertake any work on it. Repair it yourself first, and then I can upgrade it." , task_texture, task_rect, "iconed_trade_info")
			else
				str_text_2 = "Ah, in regards to your primary weapon  "..game.translate_string(name2)..". I can offer you the following upgrades:"
				if wep_1 ~= nil then
					if (nomer_massiva == 1) and (db.actor:money() >= item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 5.45x39mm to 5.56x45mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost2.." rubles%c[default]."
					elseif (nomer_massiva == 1) and (db.actor:money() < item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 5.45x39mm to 5.56x45mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost2.." rubles%c[default], but, you don't appear to have the money.."
					elseif (nomer_massiva == 2) and (db.actor:money() >= item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 9x18mm to 9x19mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost2.." rubles%c[default]."
					elseif (nomer_massiva == 2) and (db.actor:money() < item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 9x18mm to 9x19mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost2.." rubles%c[default], but, you don't appear to have the money.."
					elseif (nomer_massiva == 3) and (db.actor:money() >= item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 9x19mm to 9x18mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost2.." rubles%c[default]."
					elseif (nomer_massiva == 3) and (db.actor:money() < item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 9x19mm to 9x18mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost2.." rubles%c[default], but, you don't appear to have the money.."
					elseif (nomer_massiva == 4) and (db.actor:money() >= item_upgr_cost2) then
						str_text_2 = str_text_2.."\\n   - Change the calibre from 5.56x45mm to 5.45x39mm .. It will cost \\n%c[255,238,155,23]"..item_upgr_cost2.." rubles%c[default]."
					elseif (nomer_massiva == 4) and (db.actor:money() < item_upgr_cost2) then
						dstr_text_2 = str_text_2.."\\n   - Change the calibre from 5.56x45mm to 5.45x39mm .. It would cost you \\n%c[255,255,32,23]"..item_upgr_cost2.." rubles%c[default], but, you don't appear to have the money.."
					end
				end
				if (wep_2 ~= nil) and (db.actor:money() >= item_upgr_cost2) then
					str_text_2 = str_text_2.."\\n   - Increased accuracy ..  It will cost %c[255,238,155,23]"..item_upgr_cost2.." rubles%c[default]."
				elseif (wep_2 ~= nil) and (db.actor:money() < item_upgr_cost2) then
					str_text_2 = str_text_2.."\\n   - Increased accuracy ..  It would cost you \\n%c[255,255,32,23]"..item_upgr_cost2.." rubles%c[default], but, you don't appear to have the money.."
				end
				if (wep_3 ~= nil) and (db.actor:money() >= item_upgr_cost2) then
					str_text_2 = str_text_2.."\\n   - Reduce the weight ..  It will cost %c[255,238,155,23]"..item_upgr_cost2.." rubles%c[default]."
				elseif (wep_3 ~= nil) and (db.actor:money() < item_upgr_cost2) then
					str_text_2 = str_text_2.."\\n   - Reduce the weight ..  It would cost you \\n%c[255,255,32,23]"..item_upgr_cost2.." rubles%c[default], but, you don't appear to have the money.."
				end
			end

			if str_text_2 ~= nil then
				news_manager.give_talk_message(str_text_2 , task_texture, task_rect, "iconed_trade_info")
			end
		end
	end
end



-- and whether there is loot to upgrade

function trader_check_money_upgr_s1(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)

	if (item_in_slot ~= nil) then 
		local item_upgr_cost1 = math.floor(item_in_slot:cost() * 2 )
		if (item_upgr_cost1 > 0) and (db.actor:money() >= item_upgr_cost1) and (0.96 < item_in_slot:condition() + 0.01) then
			return true
		else 
			return false
		end 
	end
end

function trader_check_money_upgr_s2(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)

	if (item_in_slot ~= nil) then 
		local item_upgr_cost2 = math.floor(item_in_slot:cost() * 2 )
		if (item_upgr_cost2 > 0) and (db.actor:money() >= item_upgr_cost2) and (0.96 < item_in_slot:condition() + 0.01) then
			return true
		else 
			return false
		end 
	end
end


-- take away the loot, start the timer upgrade

function trader_upgrade_weapon_s1_kalibr(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local var = repairmasterlist[trader:name()][1]
		local wpn = item_in_slot:section()
		local item_repair_cost = math.floor(item_in_slot:cost() * 2)
		tt = 3
		local wep_1 =  is_upgrade_kalibr(item_in_slot:section())
		local new_wpn = nil

		if wep_1 ~= nil then
			dialogs.relocate_money(trader, item_repair_cost, "out")
			remove_repairitem_to_upgrade(1)
			amk.save_variable(var,("1"..wep_1))
			amk.g_start_timer(var,0,tt,0)
		end
	end
end

function trader_upgrade_weapon_s1_otdaca(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local var = repairmasterlist[trader:name()][1]
		local wpn = item_in_slot:section()
		local item_repair_cost = math.floor(item_in_slot:cost() * 2)
		tt = 3
		local wep_2 =  is_upgrade_otdaca(item_in_slot:section())
		local new_wpn = nil

		if wep_2 ~= nil then
			dialogs.relocate_money(trader, item_repair_cost, "out")
			remove_repairitem_to_upgrade(1)
			amk.save_variable(var,("1"..wep_2))
			amk.g_start_timer(var,0,tt,0)
		end
	end
end

function trader_upgrade_weapon_s1_ves(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local var = repairmasterlist[trader:name()][1]
		local wpn = item_in_slot:section()
		local item_repair_cost = math.floor(item_in_slot:cost() * 2)
		tt = 3
		local wep_3 =  is_upgrade_ves(item_in_slot:section())
		local new_wpn = nil

		if wep_3 ~= nil then
			dialogs.relocate_money(trader, item_repair_cost, "out")
			remove_repairitem_to_upgrade(1)
			amk.save_variable(var,("1"..wep_3))
			amk.g_start_timer(var,0,tt,0)
		end
	end
end
--;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;133      TB3D
function trader_upgrade_weapon_s2_kalibr(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local var = repairmasterlist[trader:name()][1]
		local wpn = item_in_slot:section()
		local item_repair_cost = math.floor(item_in_slot:cost() * 2)
		tt = 3
		local wep_1 =  is_upgrade_kalibr(item_in_slot:section())
		local new_wpn = nil

		if wep_1 ~= nil then
			dialogs.relocate_money(trader, item_repair_cost, "out")
			remove_repairitem_to_upgrade(2)
			amk.save_variable(var,("1"..wep_1))
			amk.g_start_timer(var,0,tt,0)
		end
	end
end
--;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function trader_upgrade_weapon_s2_otdaca(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local var = repairmasterlist[trader:name()][1]
		local wpn = item_in_slot:section()
		local item_repair_cost = math.floor(item_in_slot:cost() * 2)
		tt = 3
		local wep_2 =  is_upgrade_otdaca(item_in_slot:section())
		local new_wpn = nil

		if wep_2 ~= nil then
			dialogs.relocate_money(trader, item_repair_cost, "out")
			remove_repairitem_to_upgrade(2)
			amk.save_variable(var,("1"..wep_2))
			amk.g_start_timer(var,0,tt,0)
		end
	end
end

function trader_upgrade_weapon_s2_ves(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local var = repairmasterlist[trader:name()][1]
		local wpn = item_in_slot:section()
		local item_repair_cost = math.floor(item_in_slot:cost() * 2)
		tt = 3
		local wep_3 =  is_upgrade_ves(item_in_slot:section())
		local new_wpn = nil

		if wep_3 ~= nil then
			dialogs.relocate_money(trader, item_repair_cost, "out")
			remove_repairitem_to_upgrade(2)
			amk.save_variable(var,("1"..wep_3))
			amk.g_start_timer(var,0,tt,0)
		end
	end
end


-- take away the trunk to upgrade

function remove_repairitem_to_upgrade(slt)
	if slt ~= nil then
		local iis = db.actor:item_in_slot(slt)
		local wpn = iis:section()
		recheck = iis:id()
		release_addons(alife():object(iis:id()),wpn,iis) 
		alife():release(alife():object(iis:id()), true)
		news_manager.relocate_item(db.actor, "out", wpn)
		recheck=nil
	end
end



-- and whether the repairs needed?

function trader_repair_precond(actor, trader)
	rem_ubit_stvol_1 = 0
	rem_ubit_stvol_2 = 0
	is_perv = 0
	is_vtor = 0
	wpnsec=nil
	stcode=0
	local var = repairmasterlist[trader:name()][1]
	rem_name = repairmasterlist[trader:name()][1]
	weapon_profit_margin = repairmasterlist[trader:name()][2]
	armor_profit_margin = repairmasterlist[trader:name()][3]
--	get_console():execute(rem_name)
	get_vars(var)
	if stcode>=1 and wpnsec~=nil then return false end
	local item_in_slot_1 = db.actor:item_in_slot(1)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	local item_in_slot_6 = db.actor:item_in_slot(6)
	if item_in_slot_1 ~= nil and 0.96 > item_in_slot_1:condition() + 0.01 then return true
	elseif item_in_slot_2 ~= nil and 0.96 > item_in_slot_2:condition() + 0.01 then return true
	elseif item_in_slot_6 ~= nil and 0.96 > item_in_slot_6:condition() + 0.01 then return true
	else return false
	end	 
end

-- and whether there is loot to repair?

function trader_check_money_s1(actor, trader)
	rem_ubit_stvol_1  = 0
	local item_in_slot = db.actor:item_in_slot(1)

	local is_upgr = 0
	if (item_in_slot ~= nil) then 
		if (string.find(item_in_slot:section(),"kalibr")~=nil) or (string.find(item_in_slot:section(),"otdaca")~=nil) or (string.find(item_in_slot:section(),"ves")~=nil) then
			is_upgr = 1
		end 
	end

	if (rem_name ~= "hnd_weap_04") and (item_in_slot ~= nil) and (0.11 < item_in_slot:condition() + 0.01) and (is_upgr ~= 1) then 
		weapon_profit_margin = repairmasterlist[trader:name()][2]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 0.95 > item_in_slot:condition() then
			tmpcode = 0
			return check_secondary(item_in_slot:section())
		end 
	elseif (rem_name == "hnd_weap_04") and (item_in_slot ~= nil) then 
		weapon_profit_margin = repairmasterlist[trader:name()][2]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if (is_upgr == 1) then
			item_repair_cost = item_repair_cost * 2
		end
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 0.95 > item_in_slot:condition() then
			tmpcode = 0

			if ((item_in_slot:condition()+0.01)<=0.11) then
				rem_ubit_stvol_1  = 1
			end
			is_perv = 1
			return check_secondary(item_in_slot:section())
		end 
	end
	return false
end

function trader_check_money_s2(actor, trader)
	rem_ubit_stvol_2  = 0
	
	local item_in_slot = db.actor:item_in_slot(2)

	local is_upgr = 0
	if (item_in_slot ~= nil) then 
		if (string.find(item_in_slot:section(),"kalibr")~=nil) or (string.find(item_in_slot:section(),"otdaca")~=nil) or (string.find(item_in_slot:section(),"ves")~=nil) then
			is_upgr = 1
		end 
	end

	if (rem_name ~= "hnd_weap_04") and  (item_in_slot ~= nil) and (0.11 < item_in_slot:condition() + 0.01) and (is_upgr ~= 1) then 
		weapon_profit_margin = repairmasterlist[trader:name()][2]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 0.95 > item_in_slot:condition() then
			tmpcode = 0
			return check_secondary(item_in_slot:section())
		end 
	elseif (rem_name == "hnd_weap_04") and  (item_in_slot ~= nil)  then 
		weapon_profit_margin = repairmasterlist[trader:name()][2]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if (is_upgr == 1) then
			item_repair_cost = item_repair_cost * 2
		end
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 0.95 > item_in_slot:condition() then
			tmpcode = 0

			if ((item_in_slot:condition()+0.01)<=0.11) then
				rem_ubit_stvol_2  = 1
			end
			is_vtor = 1
			return check_secondary(item_in_slot:section())
		end 
	end
	return false
end

function trader_check_money_s6(actor, trader)
	local item_in_slot = db.actor:item_in_slot(6)
	if item_in_slot ~= nil then 
		armor_profit_margin = repairmasterlist[trader:name()][3]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 0.95 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

-- take away the loot, start the timer repair. The repair time rules, a

function trader_repiar_weapon_s1(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local wpn = item_in_slot:section()
		local var = repairmasterlist[trader:name()][1]
		weapon_profit_margin = repairmasterlist[trader:name()][2]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		local is_upgr = 0
		if (string.find(wpn,"kalibr")~=nil) or (string.find(wpn,"otdaca")~=nil) or (string.find(wpn,"ves")~=nil) then
			is_upgr = 1
		end
		if (is_upgr == 1) then
			item_repair_cost = item_repair_cost * 2
		end

		dialogs.relocate_money(trader, item_repair_cost, "out")
		tt = 0.5
		
		if (is_upgr ~=1) then
		if item_repair_cost <= 3000 then tt = 0.5
		elseif item_repair_cost <= 6000 then tt = 1.0
		elseif item_repair_cost <= 9000 then tt = 1.5
		elseif item_repair_cost <= 12000 then tt = 3.0
		elseif item_repair_cost > 12000 then tt = 6.0
		end
		elseif (is_upgr == 1) then
			if  item_repair_cost <= 3000 then tt = 4.5
			elseif item_repair_cost <= 6000 then tt = 5.0
			elseif item_repair_cost <= 9000 then tt = 5.5
			elseif item_repair_cost <= 12000 then tt = 7.0
			elseif item_repair_cost > 12000 then tt = 10.0
			end
		end
		-- get_console():execute("load ~~~ tt_"..tostring(tt))

		if ((item_in_slot:condition()+0.01)<=0.11) then
			rem_ubit_stvol_1  = 1
		end
		is_perv = 1
		remove_repairitem(1)
		amk.save_variable(var,("1"..wpn))
		-- amk.g_start_timer(var,0,0,3)    -- DEBUG-function to test, repair lasts 3 seconds.
		amk.g_start_timer(var,0,tt,0)
	end
end

function trader_repiar_weapon_s2(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local wpn = item_in_slot:section()
		local var = repairmasterlist[trader:name()][1]
		weapon_profit_margin = repairmasterlist[trader:name()][2]
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		local is_upgr = 0
		if (string.find(wpn,"kalibr")~=nil) or (string.find(wpn,"otdaca")~=nil) or (string.find(wpn,"ves")~=nil) then
			is_upgr = 1
		end
		if (is_upgr == 1) then
			item_repair_cost = item_repair_cost * 2
		end
		dialogs.relocate_money(trader, item_repair_cost, "out")
		tt = 0.5


		if (is_upgr ~=1) then
		if item_repair_cost <= 3000 then tt = 0.5
		elseif item_repair_cost <= 6000 then tt = 1.0
		elseif item_repair_cost <= 9000 then tt = 1.5
		elseif item_repair_cost <= 12000 then tt = 3.0
		elseif item_repair_cost > 12000 then tt = 6.0
		end
		elseif (is_upgr == 1) then
			if  item_repair_cost <= 3000 then tt = 4.5
			elseif item_repair_cost <= 6000 then tt = 5.0
			elseif item_repair_cost <= 9000 then tt = 5.5
			elseif item_repair_cost <= 12000 then tt = 7.0
			elseif item_repair_cost > 12000 then tt = 10.0
			end
		end
		
		-- get_console():execute("load ~~~ tt_"..tostring(tt))
		if ((item_in_slot:condition()+0.01)<=0.11) then
			rem_ubit_stvol_2  = 1
		end
		is_vtor = 1
		remove_repairitem(2)
		amk.save_variable(var,("1"..wpn))
		-- amk.g_start_timer(var,0,0,3)    -- DEBUG-function to test, repair lasts for 3 seconds.
		amk.g_start_timer(var,0,tt,0)
	end
end

function trader_repiar_armor_s6(actor, trader)
	local item_in_slot = db.actor:item_in_slot(6)
	if item_in_slot ~= nil then
		local arm = item_in_slot:section()
		local var = repairmasterlist[trader:name()][1]
		armor_profit_margin = repairmasterlist[trader:name()][3]

		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )

		if item_repair_cost <= 10000 then tt = 2.0
		elseif item_repair_cost <= 20000 then tt = 4.0
		elseif item_repair_cost <=  40000 then tt = 8.0
		elseif item_repair_cost <=  60000 then tt = 12.0
		elseif item_repair_cost <=  80000 then tt = 18.0
		elseif item_repair_cost >  80000 then tt = 24.0
		end

		remove_repair_bronik_item(6)

		amk.save_variable(var,("1"..arm))
		amk.g_start_timer(var,0,tt,0)

--		amk_mod.repair_armor(1)
		dialogs.relocate_money(trader, item_repair_cost, "out")
	end	
end

-- take away the trunk to upgrade

function remove_repair_bronik_item(slt)
	if slt ~= nil then
		local iis = db.actor:item_in_slot(slt)
		local wpn = iis:section()
		recheck = iis:id()
		alife():release(alife():object(iis:id()), true)
		news_manager.relocate_item(db.actor, "out", wpn)
		recheck=nil
	end
end


-- checking the availability of suitable stem that will go for parts. rules, themselves, in accordance with an array of "comparable" trunks

function check_secondary(wpn)
if wpn ~= nil then
	check_sec = 0
	local j = table.getn(wpnA)
	for i=1,j do
		if string.find(wpn, wpnA[i]) ~= nil then
			check_sec = 1
			wpn_temp = wpnA
		end
	end
		if check_sec == 0 then
 j=table.getn(wpnB) for i=1,j do
 if string.find(wpn,wpnB[i])~=nil then
 check_sec=2
wpn_temp = wpnB
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnC) for i=1,j do
	if string.find(wpn,wpnC[i])~=nil then
 check_sec=3
wpn_temp = wpnC
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnD) for i=1,j do
	if string.find(wpn,wpnD[i])~=nil then
 check_sec=4
wpn_temp = wpnD
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnE) for i=1,j do
	if string.find(wpn,wpnE[i])~=nil then
 check_sec=5
wpn_temp = wpnE
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnF) for i=1,j do
	if string.find(wpn,wpnF[i])~=nil then
 check_sec=6
wpn_temp = wpnF
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnG) for i=1,j do
	if string.find(wpn,wpnG[i])~=nil then
 check_sec=7
wpn_temp = wpnG
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnH) for i=1,j do
	if string.find(wpn,wpnH[i])~=nil then
 check_sec=8
wpn_temp = wpnH
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnI) for i=1,j do
	if string.find(wpn,wpnI[i])~=nil then
 check_sec=9
wpn_temp = wpnI
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnJ) for i=1,j do
	if string.find(wpn,wpnJ[i])~=nil then
 check_sec=10
wpn_temp = wpnJ
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnK) for i=1,j do
	if string.find(wpn,wpnK[i])~=nil then
 check_sec=11
wpn_temp = wpnK
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnL) for i=1,j do
	if string.find(wpn,wpnL[i])~=nil then
 check_sec=12
wpn_temp = wpnL
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnM) for i=1,j do
	if string.find(wpn,wpnM[i])~=nil then
 check_sec=13
wpn_temp = wpnM
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnN) for i=1,j do
	if string.find(wpn,wpnN[i])~=nil then
 check_sec=14
wpn_temp = wpnN
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnO) for i=1,j do
	if string.find(wpn,wpnO[i])~=nil then
 check_sec=15
wpn_temp = wpnO
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnP) for i=1,j do
	if string.find(wpn,wpnP[i])~=nil then
 check_sec=16
wpn_temp = wpnP
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnQ) for i=1,j do
	if string.find(wpn,wpnQ[i])~=nil then
 check_sec=17
wpn_temp = wpnQ
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnR) for i=1,j do
	if string.find(wpn,wpnR[i])~=nil then
 check_sec=18
wpn_temp = wpnR
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnS) for i=1,j do
	if string.find(wpn,wpnS[i])~=nil then
 check_sec=19
wpn_temp = wpnS
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnT) for i=1,j do
	if string.find(wpn,wpnT[i])~=nil then
 check_sec=20
wpn_temp = wpnT
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnU) for i=1,j do
	if string.find(wpn,wpnU[i])~=nil then
 check_sec=21
wpn_temp = wpnU
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnV) for i=1,j do
	if string.find(wpn,wpnV[i])~=nil then
 check_sec=22
wpn_temp = wpnV
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnW) for i=1,j do
	if string.find(wpn,wpnW[i])~=nil then
 check_sec=23
wpn_temp = wpnW
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnX) for i=1,j do
	if string.find(wpn,wpnX[i])~=nil then
 check_sec=24
wpn_temp = wpnX
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnY) for i=1,j do
	if string.find(wpn,wpnY[i])~=nil then
 check_sec=25
wpn_temp = wpnY
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpnZ) for i=1,j do
	if string.find(wpn,wpnZ[i])~=nil then
 check_sec=26
wpn_temp = wpnZ
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpn1) for i=1,j do
	if string.find(wpn,wpn1[i])~=nil then
 check_sec=27
wpn_temp = wpn1
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpn2) for i=1,j do
	if string.find(wpn,wpn2[i])~=nil then
 check_sec=28
wpn_temp = wpn2
 end
 end
 end
		if check_sec == 0 then
 j=table.getn(wpn3) for i=1,j do
	if string.find(wpn,wpn3[i])~=nil then
 check_sec=29
wpn_temp = wpn3
 end
 end
 end
		if check_sec ~= 0 then
			db.actor:iterate_inventory(
			function(dummy, item) 
				j = table.getn(wpn_temp) 
				for i=1,j do 
					if string.find(item:section(), wpn_temp[i])~=nil then 
						if ((item:condition()+0.01)>0.11) then --and ((item:condition()+0.01)<0.96)  then 
							tmpcode=tmpcode+1 
					
--						if ((item:condition()+0.01)>0.11) and ((item:condition()+0.01)<0.96) and (rem_name ~= "hnd_weap_04") then 
--							tmpcode=tmpcode+1 
--		 get_console():execute("1___")
--		 get_console():execute(tmpcode)
--						elseif (rem_name == "hnd_weap_04") and (item:condition()+0.01)<0.96 then 
--							tmpcode=tmpcode+1 
--		 get_console():execute("2___")
--		 get_console():execute(tmpcode)
						end 
					end 
				end 
			end, 0) 
		end


		if (rem_ubit_stvol_1 == 1) and (is_perv == 1) then
			tmpcode = tmpcode + 1
		end
		if (rem_ubit_stvol_2 == 1) and (is_vtor == 1) then
			tmpcode = tmpcode + 1
		end

		is_perv = 0
		is_vtor = 0


		if tmpcode > 1 then
			tmpcode = 0
			return true
		end
	end
	return false
end

-- take away the trunk of the repair

function remove_repairitem(slt)
	if slt ~= nil then
		local iis = db.actor:item_in_slot(slt)
		local wpn = iis:section()
		recheck = iis:id()
		check_sec=0
		check_secondary(wpn)
		release_addons(alife():object(iis:id()),wpn,iis) 
		alife():release(alife():object(iis:id()), true)
		news_manager.relocate_item(db.actor, "out", wpn)
		tmpcode = 0
		db.actor:iterate_inventory(function(dummy, item) remove_secondary(item,check_sec) end, nil)
		recheck=nil
		check_sec = 0
	end
end

-- take away the barrel, which will go to the parts, in accordance with an array of "comparable" trunks

function remove_secondary(item,checker)
	local j = 0
	if checker ~= 0 then j = table.getn(wpn_temp)
	end
	local sec = item:section()
	local finder
	local cond = item:condition() + 0.01
	for i=1,j do
		if checker ~= 0 then finder = string.find(sec, wpn_temp[i])
		end

		if (finder~=nil) and (cond > 0.11) and (tmpcode == 0) then --and (cond < 0.96) then
			if item:id()~=recheck then
				tmpcode=1
				news_manager.relocate_item(db.actor, "out", item:section())
				release_addons(alife():object(item:id()),sec,item)
				alife():release(alife():object(item:id()), true)
			end
		end
	end
end

-- repair is completed, the helmet sms

function do_release_action(par)
	if par ~= nil then
		wpnsec=nil
		stcode=0
		get_vars(par)
		amk.save_variable(par,("2"..wpnsec))
		local name = read_string_if_exist(system_ini(),wpnsec,"inv_name",nil)
		local repmas = repairmaster[par][1]
		local sms = "Greetings, warrior. This is "..tostring(repmas)..".\\nHaven't forgotten the trash you left here? Take, ready... "
		if name ~= nil then
			sms = sms..game.translate_string(name)
		else
			sms = sms.."your trunk"
		end
		sms = sms..". Advise quick travel in my direction. Heh..."
		news_manager.send_tip_txt(db.actor, sms, nil, "weaprep", 35000)
	end
end

function can_give_weapon(actor, trader)
	wpnsec=nil
	stcode=0
	local var = repairmasterlist[trader:name()][1]
	get_vars(var)
	if stcode >= 2 and wpnsec ~= nil then return true end
	return false
end

-- remove addons before repair discharges the trunks

function release_addons(sobj,wpn,obj)
	if sobj ~= nil then
		local t = amk.get_weapon_data(sobj)
		local h_scope = read_if_exist(system_ini(),wpn,"scope_status",nil)
		local h_sil = read_if_exist(system_ini(),wpn,"silencer_status",nil)
		local h_gren = read_if_exist(system_ini(),wpn,"grenade_launcher_status",nil)
		if h_scope == 2 then
			h_scope = read_string_if_exist(system_ini(),wpn,"scope_name",nil)
			if h_scope ~= nil and (t.addon_flags == 1 or t.addon_flags == 3 or t.addon_flags == 5 or t.addon_flags == 7) then
				h_scope = alife():create(h_scope, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(),db.actor:id())
			end
		end
		if h_sil == 2 then
			h_sil = read_string_if_exist(system_ini(),wpn,"silencer_name",nil)
			if h_sil ~= nil and t.addon_flags >= 4 then
				h_sil = alife():create(h_sil, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(),db.actor:id())
			end
		end
		if h_gren == 2 then
			h_gren = read_string_if_exist(system_ini(),wpn,"grenade_launcher_name",nil)
			if h_gren ~= nil and (t.addon_flags == 2 or t.addon_flags == 3 or t.addon_flags == 6 or t.addon_flags == 7) then
				h_gren = alife():create(h_gren, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(),db.actor:id())
			end
		end
		local ammo = obj:get_ammo_in_magazine()
		local name = obj:name()
		local ammoT = t.ammo_type
		local section_ammo = restriction_stock.weapons_ammo_sections(name,ammoT)
		if section_ammo ~= nil and ammo >= 1 then
			amk.spawn_ammo_in_inv(section_ammo, ammo, db.actor)
		end
	end
end

--pay repaired trunk HS, unloaded

function give_weapon_to_player(trader, actor)
	rem_ubit_stvol_1 = 0
	rem_ubit_stvol_2 = 0

	wpnsec=nil
	stcode=0
	local var = repairmasterlist[trader:name()][1]
	get_vars(var)
	if wpnsec ~= nil then
		amk.del_variable(var)
		local wpn_c = alife():create(wpnsec, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
		amk.start_timer("unload_rep_weapon",1,wpn_c.id)
		news_manager.relocate_item(db.actor, "in", wpnsec)
	end
end

function weapon_unload(objid)
	if objid ~= nil then
		local wpn = level.object_by_id(objid)
		wpn:unload_magazine()
	end
end

-- Timers

function show_timer1(actor,trader)
	if tt == 0.5 then return true end
	return false
end
function show_timer2(actor,trader)
	if tt == 1.0 then return true end
	return false
end
function show_timer3(actor,trader)
	if tt == 1.5 then return true end
	return false
end
function show_timer4(actor,trader)
	if tt == 3.0 then return true end
	return false
end
function show_timer5(actor,trader)
	if tt == 4.0 then return true end
	return false
end
function show_timer6(actor,trader)
	if tt == 6.0 then return true end
	return false
end



function show_timer_u1(actor,trader)
	if tt == 4.5 then return true end
	return false
end
function show_timer_u2(actor,trader)
	if tt == 5.0 then return true end
	return false
end
function show_timer_u3(actor,trader)
	if tt == 5.5 then return true end
	return false
end
function show_timer_u4(actor,trader)
	if tt == 7.0 then return true end
	return false
end
function show_timer_u5(actor,trader)
	if tt == 8.0 then return true end
	return false
end
function show_timer_u6(actor,trader)
	if tt == 10.0 then return true end
	return false
end


function show_timer_b1(actor,trader)
	if tt == 2.0 then return true end
	return false
end
function show_timer_b4(actor,trader)
	if tt == 12.0 then return true end
	return false
end
function show_timer_b5(actor,trader)
	if tt == 18.0 then return true end
	return false
end
function show_timer_b6(actor,trader)
	if tt == 24.0 then return true end
	return false
end


-- show HS conditions and repair cost

function repair_costs(trader, actor, first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	
	local item_name_and_price1
	local item_name_and_price2
	if db.actor ~= nil then 
		local item_in_slot_1 = db.actor:item_in_slot(1)
		local item_in_slot_2 = db.actor:item_in_slot(2)
		local item_in_slot_6 = db.actor:item_in_slot(6)
		local iznos
		local is_upgr = 0

		if item_in_slot_1 ~= nil then 
			if ((item_in_slot_1:condition()+0.01)<=0.11) then
				rem_ubit_stvol_1  = 1
			end
			is_perv = 1
			local item_repair_cost1 = math.floor( (1-item_in_slot_1:condition()) * item_in_slot_1:cost() * weapon_profit_margin )
			iznos = math.floor(100*(1-item_in_slot_1:condition()) )
			tmpcode = 0
			local checksec1 = check_secondary(item_in_slot_1:section())
			local name1 = read_string_if_exist(system_ini(),item_in_slot_1:section(),"inv_name",nil)

			is_upgr = 0

			if (string.find(item_in_slot_1:section(),"kalibr")~=nil) or (string.find(item_in_slot_1:section(),"otdaca")~=nil) or (string.find(item_in_slot_1:section(),"ves")~=nil) then
				is_upgr = 1
				item_repair_cost1 = item_repair_cost1 * 2
			end 

			if (item_repair_cost1 > 0)  and (0.96 > item_in_slot_1:condition() + 0.01) then
				if (rem_name ~= "hnd_weap_04") and (is_upgr == 1) then
					is_upgr = 0
					item_name_and_price1 = "Where did you acquire such a strange weapon? Is this the work of Lanky!? \n I would not even attempt to undertake repairs on such a weapon as this. If you wish to have it repaired - bring it back to Lanky at the Bar. \n He will take care of it for you.."
				elseif (db.actor:money() >= item_repair_cost1) and (checksec1==true) and (0.11 < item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "For repairs "..game.translate_string(name1).." you must pay me %c[255,238,155,23]"..item_repair_cost1.." rubles%c[default] in advance, and\n bring me a similar weapon that I can use for spare parts. Do not bring me any unique weapons, or you may never see it again .. I will keep them!!\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (db.actor:money() < item_repair_cost1) and (checksec1==true) and (0.11 < item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "For repairs "..game.translate_string(name1).." I will take %c[255,255,32,23]"..item_repair_cost1.." rubles%c[default] and\n a similar weapon for spare parts, but, you don't appear to have the money..\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (db.actor:money() >= item_repair_cost1) and (checksec1==false) and (0.11 < item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "For repairs "..game.translate_string(name1).." it will cost %c[255,255,32,23]"..item_repair_cost1.." rubles%c[default], however..\n you do not have a similar weapon for spare parts..\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (db.actor:money() < item_repair_cost1) and (checksec1==false) and (0.1 < item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "For repairs "..game.translate_string(name1).." it's going to cost %c[255,255,32,23]"..item_repair_cost1.." rubles%c[default], however..\n you have neither the funds, nor a similar weapon for spare parts..\n This weapon is damaged by a percentage of "..iznos.."."

				elseif (rem_name ~= "hnd_weap_04") and (0.11 >= item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "To repair "..game.translate_string(name1).." I cannot perform repairs, as it is too damaged\n If you want, I can take this piece of scrap metal off your hands for .. say... 5 percent of it's value ("..math.floor(item_in_slot_1:cost()*0.05).."rubles) and\n What do you say?!..."
				
				elseif (rem_name == "hnd_weap_04") and (0.1 >= item_in_slot_1:condition() + 0.01)  and (checksec1==true) and (db.actor:money() >= item_repair_cost1) then
					item_name_and_price1 = "Yes, it is quite damaged "..game.translate_string(name1).." simple as that..\n All right, here's the deal..\n Give me %c[255,238,155,23]"..item_repair_cost1.." rubles%c[default] as well as\n a similar weapon for spare parts.."
				elseif (rem_name == "hnd_weap_04") and (0.11 >= item_in_slot_1:condition() + 0.01)  and (checksec1==false) and (db.actor:money() >= item_repair_cost1) then
					item_name_and_price1 = "Yes, it is quite damaged "..game.translate_string(name1).." simple as that..\n It is possible for me to repair it. It will cost %c[255,255,32,23]"..item_repair_cost1.." rubles%c[default], but\n you do not have a similar weapon for spare parts.."
				elseif (rem_name == "hnd_weap_04") and (db.actor:money() < item_repair_cost1) and (checksec1==true) and (0.11 >= item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "Yes, it is quite damaged  "..game.translate_string(name1).." simple as that..\n It is possible for me to repair it. For repairs, it will cost %c[255,255,32,23]"..item_repair_cost1.." rubles%c[default] and\n a similar weapon for spare parts, but, you do not appear to have enough money.."
				elseif (rem_name == "hnd_weap_04") and (db.actor:money() < item_repair_cost1) and (checksec1==false) and (0.11 >= item_in_slot_1:condition() + 0.01) then
					item_name_and_price1 = "Yes, it is quite damaged "..game.translate_string(name1).." simple as that..\n It is possible for me to repair it. It will cost %c[255,255,32,23]"..item_repair_cost1.." rubles%c[default], but\n you do not have a similar weapon for spare parts.."
				end
				if item_name_and_price1 ~= nil then
					news_manager.give_talk_message(item_name_and_price1, task_texture, task_rect, "iconed_trade_info")
				end
			end
		end
		if item_in_slot_2 ~= nil then
			if ((item_in_slot_2:condition()+0.01)<=0.11) then
				rem_ubit_stvol_2  = 1
			end
			is_vtor = 1
			local item_repair_cost2 = math.floor( (1-item_in_slot_2:condition()) * item_in_slot_2:cost() * weapon_profit_margin )
			iznos = math.floor(100*(1-item_in_slot_2:condition()) )
			tmpcode = 0
			local checksec2 = check_secondary(item_in_slot_2:section())
			local name2 = read_string_if_exist(system_ini(),item_in_slot_2:section(),"inv_name",nil)

			is_upgr = 0
			if (string.find(item_in_slot_2:section(),"kalibr")~=nil) or (string.find(item_in_slot_2:section(),"otdaca")~=nil) or (string.find(item_in_slot_2:section(),"ves")~=nil) then
				is_upgr = 1
				item_repair_cost2 = item_repair_cost2 * 2
			end 


			if (item_repair_cost2 > 0)  and (0.96 > item_in_slot_2:condition() + 0.01) then
				if (rem_name ~= "hnd_weap_04") and (is_upgr == 1) then
					is_upgr = 0
					item_name_and_price2 = "Where did you acquire such a strange weapon? Is this the work of Lanky!? \n I would not even attempt to undertake repairs on such a weapon as this. If you wish to have it repaired - bring it back to Lanky at the Bar. \n He will take care of it for you.."
				elseif (db.actor:money() >= item_repair_cost2) and (checksec2==true) and (0.11 < item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "For repairs "..game.translate_string(name2).." you must pay me %c[255,238,155,23]"..item_repair_cost2.." rubles%c[default] in advance, and\n bring me a similar weapon that I can use for spare parts. Do not bring me any unique weapons, or you may never see it again .. I will keep them!!\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (db.actor:money() < item_repair_cost2) and (checksec2==true) and (0.11 < item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "For repairs "..game.translate_string(name2).." I will take %c[255,255,32,23]"..item_repair_cost2.." rubles%c[default] and\n a similar weapon for spare parts, but, you don't appear to have the money..\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (db.actor:money() >= item_repair_cost2) and (checksec2==false) and (0.11 < item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "For repairs "..game.translate_string(name2).." it will cost you %c[255,255,32,23]"..item_repair_cost2.." rubles%c[default], however..\n you do not have a similar weapon for spare parts..\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (db.actor:money() < item_repair_cost2) and (checksec2==false) and (0.11 < item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "For repairs "..game.translate_string(name2).." it will cost %c[255,255,32,23]"..item_repair_cost2.." rubles%c[default], however..\n you have neither the funds, nor a similar weapon for spare parts..\n This weapon is damaged by a percentage of "..iznos.."."
				elseif (rem_name ~= "hnd_weap_04") and (0.11 >= item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "To repair "..game.translate_string(name2).." I cannot perform repairs, as it is too damaged\n If you want, I can take this piece of scrap metal off your hands for .. say... 5 percent of it's value ("..math.floor(item_in_slot_2:cost()*0.05).."rubles) and\n What do you say?!..."
				elseif (rem_name == "hnd_weap_04") and (0.1 >= item_in_slot_2:condition() + 0.01)  and (checksec2==true) and (db.actor:money() >= item_repair_cost2) then
					item_name_and_price2 = "Yes, it is quite damaged "..game.translate_string(name2).." simple as that..\n All right, here's the deal..\n Give me %c[255,238,155,23]"..item_repair_cost2.." rubles%c[default] as well as\n a similar weapon for spare parts.."
				elseif (rem_name == "hnd_weap_04") and (0.11 >= item_in_slot_2:condition() + 0.01)  and (checksec2==false) and (db.actor:money() >= item_repair_cost2) then
					item_name_and_price2 = "Yes, it is quite damaged "..game.translate_string(name2).." simple as that..\n It is possible for me to repair it. It will cost %c[255,255,32,23]"..item_repair_cost2.." rubles%c[default], but\n you do not have a similar weapon for spare parts.."
				elseif (rem_name == "hnd_weap_04") and (db.actor:money() < item_repair_cost2) and (checksec2==true) and (0.11 >= item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "Yes, it is quite damaged  "..game.translate_string(name2).." simple as that..\n It is possible for me to repair it. For repairs, it will cost %c[255,255,32,23]"..item_repair_cost2.." rubles%c[default] and\n a similar weapon for spare parts, but, you do not appear to have enough money.."
				elseif (rem_name == "hnd_weap_04") and (db.actor:money() < item_repair_cost2) and (checksec2==false) and (0.11 >= item_in_slot_2:condition() + 0.01) then
					item_name_and_price2 = "Yes, it is quite damaged "..game.translate_string(name2).." simple as that..\n It is possible for me to repair it. It will cost %c[255,255,32,23]"..item_repair_cost2.." rubles%c[default], but\n you do not have a similar weapon for spare parts.."
				end
				if item_name_and_price2 ~= nil then
					news_manager.give_talk_message(item_name_and_price2, task_texture, task_rect, "iconed_trade_info")
				end
			end
		end


		armor_profit_margin = repairmasterlist[trader:name()][3]

	--	local var = repairmasterlist[trader:name()][1]
		if rem_name ~= "hnd_weap_01" then

		if item_in_slot_6 ~= nil then
			local item_repair_cost = math.floor( (1-item_in_slot_6:condition()) * item_in_slot_6:cost() * armor_profit_margin )
			iznos = math.floor(100*(1-item_in_slot_6:condition()))

			if (item_repair_cost > 0) and (db.actor:money() >= item_repair_cost) and (item_in_slot_6:condition()) < 0.95 then
						-- list_trader_repair_2 Cost of repairing Armour:
				local item_name_and_price = "Armour Condition: "..iznos.."%. "..game.translate_string("list_trader_repair_2").." %c[255,238,155,23]"..item_repair_cost.." rubles%c[default]. Agreed?"
				news_manager.give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")

			elseif (item_repair_cost > 0) and (db.actor:money() < item_repair_cost) then
						-- list_trader_repair_2 Cost of repairing Armour:
				local item_name_and_price = "Armour Condition: "..iznos.."%. "..game.translate_string("list_trader_repair_2").." %c[255,255,32,23]"..item_repair_cost.." rubles%c[default]. Come back later... as you do not appear to have the money.."
				news_manager.give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")


			end
		end
	  end
	end
end

-- checking for a clogged stems in the trash

function check_damaged1(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		if (rem_name ~= "hnd_weap_04") and (0.11 > item_in_slot:condition() + 0.01) then return true end
	end
	return false
end

function check_damaged2(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		if (rem_name ~= "hnd_weap_04") and (0.11 > item_in_slot:condition() + 0.01) then return true end
	end
	return false
end

-- fix stuff is useless, I will give you a pie for him and go with TNB

function pay_damaged1(actor, trader)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		dialogs.relocate_money(db.actor, math.floor(item_in_slot:cost()*0.05), "in")
		news_manager.relocate_item(db.actor, "out", item_in_slot:section())
		alife():release(alife():object(item_in_slot:id()), true)
	end
	return false
end

function pay_damaged2(actor, trader)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		dialogs.relocate_money(db.actor, math.floor(item_in_slot:cost()*0.05), "in")
		news_manager.relocate_item(db.actor, "out", item_in_slot:section())
		alife():release(alife():object(item_in_slot:id()), true)
	end
	return false
end

------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
------------------------------------------------------------------
function get_vars(amkvar)
	local strg = amk.load_variable(amkvar,nil)
	if strg ~= nil then
		wpnsec = string.sub(strg,2,string.len(strg))
		stcode = tonumber(string.sub(strg,1,1))
	else
		wpnsec = nil
		stcode = 0
	end
end

function read_if_exist(ltx, section, value, default)
	if ltx:line_exist(section,value) then
		return ltx:r_float(section,value)
	else
		return default
	end
end

function read_string_if_exist(ltx, section, value, default)
	if ltx:line_exist(section,value) then
		return ltx:r_string(section,value)
	else
		return default
	end
end

