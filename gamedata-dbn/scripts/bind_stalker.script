-- TB3D 1.0.9.9.5.0    added hide weapon option, The Collector, restored keylogger, abort_alert added,
-- fov nvision fixed, added Meltac DDOF option, toggle dig NV, adjusted slices, re-wrote hiding weapons
-- re-wrote on item take to add short-circuiting of section tests, dmx135, added art det, chgd modders interface
-- removed vkluchit_generator_done as it has flaw in all.spawn, fixed save/load amkII error, chgd fixer, fixed ara_pda,
-- chgd scopeUsed, check actor alive on save, added option alife, moved pause timer and resync,
-- use delta instead of slice for skips, moved collector_destroy, removed check_old_save(), mon_dead_doc and bad_psi_helmet,
-- bioradar and inventory update, inv/radar update order, moved fixer, tweaked delta limits, removed _PIU, sak.add_tail,
-- fss, force weather, removed death checks from slices, hit only on blow type 0, marsh_band, upd_timeNET, dell_blok_tele,
-- sak_book4, grib_respawn to OAL, player_ogg.update, point_drop, rstr update 500
function my_ver() return "1.0.9.9.5.0" end
-- TB3D re-written 08/15/2011
-- file from the mod "People Salsola 2009" from 14.06.
-- Adapted to the Manager of weapons. Rulix aka Bak on 02/07/2009
-- Adatiroval: Idler.
local string_find = string.find
---------- globals ----------------------
dmx_transfer = false 											-- DMX MOD
post_process = 0												--used by _g.script
slice_base	= 1													--time slicer, global for xr motivator
time_now 	= 0													--global time, all synch to the actor update in motivator
---- end globals ------------------------

local RestrictionStock = false   								--Restrictions on the capacity of equipment if true
local weapon_hide = false										--used by update
local last_time													--used by time slicer, must start as nil

-- counters for staggered time slicing
local upd_timeOAL
local upd_timeGMS
local upd_timeCMP		--109950
local upd_timeFSS
local upd_timeART
local upd_timeANM
local upd_timeENV
local upd_timePSY
local upd_timeMUS
local upd_timeAEM
local upd_timeARC
local upd_timeDOC
local upd_timeRAD
local upd_timeMED
local upd_timeSAK
local upd_timeWEP
local upd_timeSCP
local upd_timeRST		--restrictors has it's own
local upd_timeTSK
local upd_timeNET
local upd_timeKEY		--keylogger 109950
local upd_timeFTL		--FALL THRU LEVEL 109950

---------------update time slice multipliers---------------------
--------------gs=game second, gm=game minute---------------------
local upd_time_OAL = 60000 * TB3D_Modders.alife_slice_mult		--1gm * multiplier

local upd_time_FTL = 30000	--*FALL THRU LEVEL CHECK, avg 30gs

local upd_time_KEY = 2000 	--*keypress poling, avg 2gs

local upd_time_NET = 2000 	--*network poling, avg 2gs

local upd_time_GMS = 5000	--*(<2) game stats in log if TB3D_Modders.log_game_stats == true, 5gs

local upd_time_CMP = 2100 	--*(<3) xr_companion  109950

local upd_time_BLW = 1800 	--*(<3) blowout hits, avg 1.8gs
local upd_time_ENV = 1700	--*(<2) environment changes 1.7gs

local upd_time_ART = 1000 	--*(<3) artifact detectors, 1gs
local upd_time_FSS = 700	--*(<3) FSS updates
local upd_time_ANM = 250 	--*(<2) anomalies, .25gs

local upd_time_PSY = 170	--*(<2) psy antenna
local upd_time_MUS = 150	--*(<2) music, instruments, media player
local upd_time_AEM = 130	--arena
local upd_time_ARC = 110	--arc container

---------------------100	--used by xr_motivator.update, .1gs (10 times per gs)

local upd_time_DOC = 90		--*(<2) doc viewer, sleep 
local upd_time_RAD = 70		--*(<3) radiation
local upd_time_MED = 60		--*(<2) meds
local upd_time_SAK = 50		--sak, mec work
local upd_time_WEP = 40		--weapon global update
local upd_time_SCP = 30		--scope accuracy, broken flashlight
local upd_time_RST = 20		--restrictors		--second most important, uses own counter
local upd_time_TSK = 10		--tasks				--most important, .01gs (100 times per gs)

-----------slice_base is a muliplier of above----------------
--------also used as a skip condition: *(<slice) in above-----------------
local delta_high = TB3D_Modders.delta_critical     	-- 85 skip if above, slice = 4, above 85 slice = 5
local delta_moderate = TB3D_Modders.delta_moderate	-- 65 skip if above 65ms, slice = 3
local delta_low = TB3D_Modders.delta_low			-- 45 skip if above 45ms, slice = 2
local delta_lowest = TB3D_Modders.delta_lowest		-- 30 skip if above 30ms, slice = 1

local table_sort = table.sort
local math_ceil = math.ceil
local game_difficulty_by_num = {
  [0] = "gd_novice",
  [1] = "gd_stalker",
  [2] = "gd_veteran",
  [3] = "gd_master",
  [4] = "gd_collector"		--!!!!TB3D
  }

function init(obj)
  xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
  npc:bind_object(actor_binder(npc))
  -- level_tasks.add_location(707,"blue_location","Lukash")
  -- level_tasks.add_location(702,"blue_location","Max")
  -- level_tasks.add_location(728,"blue_location","the Cook")
end

---------------------------------------------------------------------------------
class "actor_binder" (object_binder)

-------------------------------INIT------------------------------------------------
function actor_binder:__init (obj) super(obj)
  self.bCheckStart = false
  self.weather_manager = level_weathers.WeatherManager()
  self.actor_detector = xr_detector.actor_detector()
  self.is_saved = false
  TB3D_Services.report_gulags()
end

-------------------------------NET SPAWN--------------------------------------------------
function actor_binder:net_spawn(data)
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn")
	end
	local lname = level.name()
	zamok.restore()
	babah.collectBombs()
	level.show_indicators()
	self.bCheckStart = true
	self.weapon_hide = false -- hidden or not the weapon during a conversation.
	weapon_hide = false  --used by cars, arhara, medicines
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn2")
	end
	if object_binder.net_spawn(self,data) == false then	return false end
	db.add_actor(self.object)
	TB3D_Services.packet_alert("bstalk: net spawn actor added to database")
	amk.on_game_load()																--amk freeplay variable set
	--TB3D_Population_Control.check_level2(lname, sname)
	--TB3D_Services.remove_info("u_6")												--no music playing
	if TB3D_Services.remove_info("tb3d_test_spawns") == true then
		TB3D_Services.test_spawns()
	end
	if self.st.disable_input_time == nil then level.enable_input() end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn3")
	end
	TB3D_Services.set_daytime()														--establishes day/night
	self.weather_manager:reset()
	if (actor_stats.add_to_ranking~=nil) then actor_stats.add_to_ranking(self.object:id()) end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn4")
	end
	if TB3D_Modders.use_xtrm_ai == true then xrs_ai.actor_net_spawn(self) end
	rx_ai.actor_net_spawn()
    hidden_slots.net_spawn() -- DMX MOD
    dmx_treasure.net_spawn()
    bolt_ending.net_spawn()
	dmx_medicines.net_spawn()
	meceniy_work.main()
	meceniy_utils.net_spawn_callback()
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn5")
	end
	spawn_teleport.spawn_teleport_exit()  -- kostya_level --
	spawn_teleport.spawn_teleport_hospital()
    bind_det_arts.start_update()
    netpacket_pda_id = netpacket_pda_create.create_pda()
	--sak.add_tail(lname)															--TB3D 109940 now in dyn spawns
	if lname=="l05_bar" then			--!!!!TB3D
		if TB3D_Modders.bar_music == 3 then
			TB3D_Services.give_info("bar_modern")
		elseif TB3D_Modders.bar_music == 2 then
			TB3D_Services.give_info("bar_rockn")
		elseif TB3D_Modders.bar_music == 1 then
			TB3D_Services.give_info("bar_rock")
		else
			TB3D_Services.give_info("bar_retro")
		end
	end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.info_alert("BSTALK: actor net spawn6")
	end
	TB3D_Shaders.on_spawn()
	if TB3D_Services.is_collector() then
		if amk_mod.blowout() == false and (not Psy or (db.Flag2 == 0 and db.Flag3 == 0 and db.Flag4 == 0 and db.Flag5 == 0)) then
			level_weathers.set_new_weather(self.cur_weather)
			level.set_weather("default")
			TB3D_Services.give_info("tb3d_force_weather")
		end
	else
		braad_test.false_info()
		if lname == "l04_darkvalley" then	
			--local obj=alife():story_object(425)
			--if obj and IAmAStalker[obj:clsid()] and obj:alive() then
				if has_alife_info("bandits_neitral") then
					--TB3D_Services.set_community(db.actor, "stranger", 0, 0, true)
					db.actor:set_character_community("stranger", 0, 0)
				--end
			else
				--TB3D_Services.restore_community(db.actor, "actor")
				db.actor:set_character_community("actor")
			end
		else --if sname == "l04_darkvalley" then
			--TB3D_Services.restore_community(db.actor, "actor")
			db.actor:set_character_community("actor")
		end
		if not has_alife_info("zvezdochet_talk_start") then
			level_weathers.set_new_weather("stormy")
			TB3D_Services.give_info("tb3d_force_weather")
		elseif amk_mod.blowout() == false and (not Psy or (db.Flag2 == 0 and db.Flag3 == 0 and db.Flag4 == 0 and db.Flag5 == 0)) then
			level_weathers.set_new_weather(self.cur_weather)
			level.set_weather("default")
			TB3D_Services.give_info("tb3d_force_weather")
		end
	end
	TB3D_Dyn_spawn.spawn_vehicles()
	TB3D_Dyn_spawn.spawn_kill_zones()
	TB3D_Dyn_spawn.spawn_fix_props()
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn7")
	end
	if TB3D_bstalk_spawn then TB3D_bstalk_spawn.init() end
	--if TB3D_Services.is_collector() == true then TB3D_Services.give_info("tb3d_collector") end			--temp fix for 109934
	-------------------------------------test setcion-------------------------------------------
	--TB3D_Services.move_actor(73.75172,4.4,0.077)
	--tb3d_net_manager.network_send("test")
	--------------------------------------------------------------------------------------------
	TB3D_spots.set_spots()
	if _g.is_disconnecting == true then
		_g.is_disconnecting = false
	end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK: actor net spawn8")
	end
	amk.start_timer("pause_menu_timer", 0.6)
	--collectgarbage("collect")										-- force memory cleanup
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("BSTALK:  net_spawn DONE pda["..utils.to_str(netpacket_pda_id).."]")
	end
	return true
end

-----------------------------NET DESTROY-----------------------------objects are already destroyed
function actor_binder:net_destroy()
	_g.is_disconnecting = true
	--if TB3D_Modders.Global_Debug then
		TB3D_Services.info_alert("BSTALK:  net destroy")
	--end
	xr_sound.stop_all_sound_object()
	if biodetector then biodetector.net_destroy() end
	if TB3D_dav_hunt then TB3D_dav_hunt.net_destroy() end
	TB3D_Triggers.on_net_destroy()	--bad torch, not used att
	if(actor_stats.remove_from_ranking~=nil) then actor_stats.remove_from_ranking(self.object:id()) end
	--TB3D_Services.info_alert("BSTALK:  net destroy 2")
	--db.del_actor(self.object)
	sr_light.clean_up()
	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.trade_sell_buy_item, nil) -- for game stats
	--self.object:set_callback(callback.actor_sleep, nil)
	self.object:set_callback(callback.task_state, nil)
  --self.object:set_callback(callback.map_location_added, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)
  --self.object:set_callback(callback.death, nil)
	--self.object:set_callback(33, nil)
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end
	--xr_sound.stop_all_sound_object()
	if iniStatistic and TB3D_Modders.Global_Debug then							--_g ini statistics table
		TB3D_Services.info_alert("BIND STALKER: amk.dump_table(iniLines):")
		amk.dump_table(iniLines)
		TB3D_Services.info_alert("BIND STALKER: amk.dump_table(iniOtherLines):")
		amk.dump_table(iniOtherLines)
		TB3D_Services.info_alert("BIND STALKER: amk.dump_table(iniStat):")
		local t = {}
		for sect, count in pairs(iniStat) do
			table.insert(t, {sect, count})
		end
		table_sort(t, sortStat)
		amk.dump_table(t)
	end
	--TB3D_Services.info_alert("BSTALK:  net destroy3")
	dmx_mod.dmx_net_destroy() -- DMX MOD
	xr_spawner.net_destroy()
	rx_wmgr.net_destroy()
	db.del_actor(self.object)							--deletes actor proxy
	object_binder.net_destroy(self)						--very last call on disconnect
	--if TB3D_Modders.Global_Debug then
		TB3D_Services.info_alert("BSTALK:  net destroy done")
	--end
end

function sortStat(t1, t2)
	return t1[2] > t2[2]
end

-------------------------------RE-INIT----------------------------------------------------
function actor_binder:reinit()
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("BSTALK:  re init") end
	object_binder.reinit(self)
	db.init_my_storage(self.object)
	self.st = db.storage[self.object:id()]
	self.st.pstor = nil
	self.next_restrictors_update_time = -10000
	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	--self.object:set_callback(callback.actor_sleep, self.sleep_callback, self)
	self.object:set_callback(callback.task_state, self.task_callback, self)
	--self.object:set_callback(callback.map_location_added, self.map_location_added_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.on_use_object, self)
	--self.object:set_callback(callback.death, self.death_callback, self)
	--self.object:set_callback(33, self.on_key, self)
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("BSTALK:  reinit DONE") end
end

-------------------------DEATH CALLBACK---------------------------------------------------
function actor_binder:death_callback(victim, who)
TB3D_Services.info_alert("BSTALK:  death callback")
	--if victim:id() == db.actor:id() then
		--//difficulty_manager.deathStatCollect()		--for on-line games  !!!!TB3D
	--end
end

function actor_binder:take_item_from_box(box, item)
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  take item from box") end
	if TB3D_Services.is_collector() == true then
		if TB3D_Collector.from_box(box, item) == true then
			if dmx_transfer then dmx_transfer=false end
		end
	else
		if TB3D_Stalker.from_box(box) == true then
			if dmx_transfer then dmx_transfer=false end
		end
	end
	local story_id = box:story_id()
	if story_id then treasure_manager.take_treasure(box, story_id) end
	local sect = item:section()
	if sect == "zamok" then
		local ln = level.name()
		local box_id = box:id()
		for i, v in pairs(amk_offline_alife.protected.ids) do
			if v == box_id then
				table.remove(amk_offline_alife.protected.ids, i)
				amk_offline_alife.update_tables(ln)
				news_manager.amk_send_tip(game.translate_string("sms_cache_unlocked"),game.translate_string("sms_lan"), 1, 10, "common_channel")
				break
			end
		end
	end
	amk.remove_spot_from_map(box:id(),"crlc_big")
	gps_habar.on_item_take_from_box(box, item) --idler++--
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  take item from box done") end
end --item from box

----------------------------BORDER ENTER--------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  border enter") end
  self.actor_detector:actor_enter()
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  border_enter DONE") end
end

---------------------------BORDER EXIT-----------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  border_exit") end
  self.actor_detector:actor_exit()
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  border_exit DONE") end
end

---------------------------ON KEY HIT-----------not functioning yet---------------------------
--function actor_binder:on_key(key)
	--TB3D_Services.packet_alert("actor_binder:on_key "..key.." "..dik_to_bind(key) )
--end

---------------------------------INFO CALLBACK------------------------------------------------
function actor_binder:info_callback(npc, info_id)
	if not npc or not npc.id then
		TB3D_Services.packet_alert("BSTALK: info callback npc[nil] for info["..utils.to_str(info_id).."]")
	elseif npc:id() ~= db.actor:id() then
		TB3D_Services.packet_alert("BSTALK: info callback not actor npc["..npc:name().."] for info["..utils.to_str(info_id).."]")
	else
		if TB3D_Modders.Global_Debug or TB3D_Modders.use_info_message then
			TB3D_Services.packet_alert("BSTALK: info callback info["..utils.to_str(info_id).."]")
		end
		if TB3D_Services.is_collector() == false then
			if TB3D_Modders.effector_spawn == true then
				meceniy_spawn.respawn(info_id)
			end
		end
		level_tasks.proceed(self.object)  --' Plot
		level_tasks.process_info_portion(info_id)  -- Markers on the map
		amk.on_info(db.actor,info_id) 
		if TB3D_bstalk_info then TB3D_bstalk_trade.info(npc, info_id) end
		if TB3D_Modders.use_ammo_belt == true then
			belt_ammo.on_info(info_id)
			belt_grenade.on_info(info_id)
		end
		inventory.on_inventory_info(info_id) 
		--if TB3D_Modders.Global_Debug then
			--TB3D_Services.packet_alert("BSTALK: info callback1")
		--end
		--if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK: info callback2") end
		if info_id=="ui_inventory_hide" or info_id=="ui_trade_hide" or info_id=="ui_car_body_hide" then
			local outfit=db.actor:item_in_slot(6)
			if outfit then
				db.actor:transfer_item(outfit,db.actor)
			end
		end
		--if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK: info callback3") end
		hidden_slots.on_info(info_id)
		m_bar.info_callback(info_id)
		if info_id=="ui_car_body" or info_id=="ui_car_body_hide" then
			dmx_box_menu.on_info(info_id)
		end
		--if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK: info callback4") end
		dmx_pda_buttons.on_info(info_id)
		if TB3D_Services.is_collector() then
			TB3D_Collector.on_info(info_id)
		else
			TB3D_Stalker.on_info(info_id)
		end
	end
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  info_callback DONE") end
end

-----------------------------ON TRADE--------------------------------------------
function actor_binder:on_trade(item, sell_bye, money)
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  on trade") end
    if sell_bye == true then
       if TB3D_Modders.log_game_stats == true then game_stats.money_trade_update(money) end
    else       
       if TB3D_Modders.log_game_stats == true then game_stats.money_trade_update(-money) end
    end   
	if TB3D_bstalk_trade then TB3D_bstalk_trade.on_trade(item, sell_bye, money) end
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  on trade done") end
end

---------------------------ARTICLE CALLBACK-----------------------------------------------
function actor_binder:article_callback(npc, group, name)
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  article_callback") end
  if device().precache_frame >1 then return end
  dmx_mod.encyclopedy_news(group,name) -- DMX MOD
  amk.on_info(npc,info_id)
	if TB3D_bstalk_article then TB3D_bstalk_info.article(npc, group, name) end
  if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  article_callback DONE") end
end

--------------------------ON ITEM TAKE-----------------------------
function actor_binder:on_item_take(item)
	local obj = item 
	if not obj then return end
	local is_remove_obj = false
	local ln = level.name()
	local sect=obj:section()
	if not sect then sect = obj:name() end
	if TB3D_Modders.use_inventory_message then TB3D_Services.info_alert("BSTALK:  on item take["..utils.to_str(sect).."]") end
--TB3D_Services.info_alert("BSTALK:  on item take2")			--dmx mod
	if TB3D_bstalk_take then TB3D_bstalk_take.item(obj, sect, ln) end
    m_bar.take_item(obj)				--stealing object reactions
	level_tasks.proceed(self.object)
    if TB3D_Services.is_collector() == false then
		flamethrower.on_item_take(obj)
	end
    if TB3D_Modders.log_game_stats == true then game_stats.update_take_item(obj, self.object) end
--TB3D_Services.info_alert("BSTALK:  on item take3")
	gps_habar.on_item_take(obj) 							--amk
	amk.remove_spot_from_map(obj:id(),"red_location")
	amk_utils.inventory_update(obj, 1)
	if RestrictionStock == true then restriction_stock.restriction_of_stock(obj,0) end
	if TB3D_Modders.use_xtrm_ai and xrs_ai then xrs_ai.actor_item_take(obj) end 
--TB3D_Services.info_alert("BSTALK:  on item take4")
  --AMK UTILS--
    babah.on_item_take(obj)
	inventory.on_item_take(obj)
	arc_main.get_item(obj)
	if sect == "arc_ballast" or sect == "separator" then
		return
	elseif protected_items.obj_is_protected(obj, "items_protected", "exactly") == false
	  and system_ini():line_exist(sect, "inv_weight") then
		dmx_inv_weight_static.add_to_weight(system_ini():r_float(sect, "inv_weight"))
	end
	if sect == "medkit" or sect == "medkit_army" or sect == "medkit_scientic" or sect == "medkit_elite" then
		if TB3D_Modders.CopKeys == true then TB3D_Services.inc_meds(1) end
	elseif sect == "antirad" then
		if TB3D_Modders.CopKeys == true then TB3D_Services.inc_rads(1) end
	elseif sect == "bandage" or sect == "bandage_dmx" then
		if TB3D_Modders.CopKeys == true then TB3D_Services.inc_bandage(1) end
	elseif sect == "vodka" or sect == "absolut_vodka" or sect == "smirnoff_vodka" or sect == "nemiroff_vodka" then
		if TB3D_Modders.CopKeys == true then TB3D_Services.inc_vodka(1) end
	elseif sect=="fake_bolt" or sect=="bolt_fix" then 
		if TB3D_Modders.unlimited_bolts == false then bolt_ending.bolt_fix(obj) end
	elseif sect=="bolt" then
		if TB3D_Modders.unlimited_bolts == false then bolt_ending.bolt_end(obj) end
	elseif sect=="m_dmx_box" then
		amk.remove_item(obj)
		dmx_treasure.return_items()	
	elseif sect=="device_torch" then
		--to be used in the future
	elseif sect=="repair_item_outfit" or sect=="repair_item_weapon" then
		sak.repair_box_close(obj) 
	elseif sect=="wpn_sg552_fss_de" then
		if ln == "red_forest" then TB3D_Triggers.tunnel_rat2() end
	elseif sect=="nebo_heavy_outfit" and ln == "marsh" then
		TB3D_Services.give_info("tb3d_marmor_have")
	elseif string_find(sect,"gl_test_shell") or string_find(sect,"gl_fake_missile") then
		rx_gl.fake_pickup(obj)
	elseif sect == "specops_outfit_kat_eyeplus" then
		if ln == "l12u_sarcofag" and amk.load_variable("tb3d_ald_weapons", 0) == 7 then
			TB3D_Triggers.spawn_sarc_pack(6)
			amk.save_variable("tb3d_ald_weapons", 8)
		end
	elseif TB3D_Services.is_collector() == true then
		is_remove_obj = TB3D_Collector.on_item_take(obj)
	else
		is_remove_obj = TB3D_Stalker.on_item_take(obj)
		if has_alife_info("info_way_false") and ln~="l05_bar" then					--garrik in bar
			TB3D_Services.give_info("informer_out")
		end
		dmx_mod.cube_take(obj)
	end
	if is_remove_obj == true then
		self.object:drop_item(obj)
		amk.remove_item(obj)
	end
	art_hit.hit_by_art(obj)
	dmx_mod.visual_fix(obj)
	dmx_pda_notepad.mapspot_remove(obj)
	if TB3D_Modders.use_inventory_message then 
		TB3D_Services.info_alert("BSTALK:  on item take done")
	end
end --item take

--------------------------------ON ITEM DROP----------------------------------
function actor_binder:on_item_drop(obj)
	if obj then
		local sect = obj:section()
		local ln = level.name()
		if TB3D_Modders.use_inventory_message then
			TB3D_Services.info_alert("BSTALK:  on item drop["..utils.to_str(obj:name()).."] section["..utils.to_str(sect).."]")
		end
		if sect == "arc_ballast" or sect == "separator" then return end
		if TB3D_Modders.log_game_stats == true then game_stats.update_drop_item(obj, self.object) end
		if TB3D_bstalk_drop then TB3D_bstalk_drop.item(obj, sect, ln) end
		babah.li(obj)
		player_ogg.lose_item(obj)    -- Vergas ogg-player
		arc_main.lose_item(obj)				--sak
		m_bar.drop_g_item(obj)				--dmx
		level_tasks.proceed(self.object)
		if TB3D_Services.is_collector() == false then
			flamethrower.on_item_drop(obj)
		end
		amk.on_item_drop(obj)
		if amkII_transmutator then amkII_transmutator.amkUseTransmutator(obj) end
		gps_habar.on_item_drop(obj) --idler++--
		amk_utils.inventory_update(obj, -1)
		if RestrictionStock ~= nil then restriction_stock.restriction_of_stock(obj,1) end
		inventory.on_item_drop(obj)
		spawn_level_changer.checking_droped_obj(obj)
		razgruzka_v.set_lost_id(-1) 									-- preset to unload
		if protected_items.obj_is_protected(obj, "items_protected", "exactly") == false
			and system_ini():line_exist(sect, "inv_weight") then
			dmx_inv_weight_static.sub_from_weight(system_ini():r_float(sect, "inv_weight"))
		end
		if sect=="fake_bolt" then 
			bolt_ending.bolt_lose()
		elseif sect=="bolt" then
			bolt_ending.bolt_lose()
			amk.save_variable("b_dr",true)
		elseif sect == "medkit" or sect == "medkit_army" or sect == "medkit_scientic" or sect == "medkit_elite" then
			if TB3D_Modders.CopKeys == true then TB3D_Services.inc_meds(-1) end
		elseif sect == "antirad" then
			if TB3D_Modders.CopKeys == true then TB3D_Services.inc_rads(-1) end
		elseif sect == "bandage" or sect == "bandage_dmx" then
			if TB3D_Modders.CopKeys == true then TB3D_Services.inc_bandage(-1) end
		elseif sect == "vodka" or sect == "absolut_vodka" or sect == "smirnoff_vodka" or sect == "nemiroff_vodka" then
			if TB3D_Modders.CopKeys == true then TB3D_Services.inc_vodka(-1) end
		elseif sect == "antizombie" then db.actor.psy_health=1.0	--Get rid of the zombies--
		elseif sect == "hand_teleporter" then
			local tbl		= {}
			tbl.obj_id		= obj:id()
			tbl.obj_sect	= sect
			amk.start_timer("timer_drop_obj_hand_teleporter", 0.2, tbl)
		elseif sect=="repair_box_outfit" then
			sak.repair_box_outfit(obj)
		--elseif sect=="pda_art_mod" then pda_art_mod.f_pda_art_mod_use(obj)
		elseif sect == "zamok" then
			zamok.on_drop(obj)
		elseif sect == "razgruzka" then
			razgruzka_v.set_lost_id(obj:id()) -- indication that the object is unloaded
		elseif TB3D_Services.is_collector() then
			TB3D_Collector.item_drop(obj)
		else
			TB3D_Stalker.item_drop(obj)
		end
	elseif TB3D_Modders.use_abort_message then
		TB3D_Services.abort_alert("BSTALK:  on item drop obj[nil]")
	end
	if TB3D_Modders.use_inventory_message then TB3D_Services.info_alert("BSTALK:  on item drop done") end
end --item drop

------------------------------------TASK CALLBACK----------------------------------------
function actor_binder:task_callback(_task, _objective, _state)
	if TB3D_Modders.Global_Debug == true then TB3D_Services.packet_alert("BSTALK:  task_callback") end
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	if TB3D_Services.is_collector() == true then
		if not has_alife_info("tb3d_collector_done") then return end --suppress during Collector start to save space in pda
	end
	if _objective:get_idx() == 0 then
		if _state == task.fail then
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end
	if TB3D_Modders.log_game_stats == true then game_stats.update_task(_task, _objective, _state) end
	if TB3D_Modders.Global_Debug == true then TB3D_Services.packet_alert("BSTALK:  task_callback DONE") end
end

----------------------------------  !!!!TB3D-------------------------
function actor_binder:map_location_added_callback(spot_type_str, object_id)
  --if (false==app_ready()) or (device().precache_frame>1) then return end
  --'news_manager.send_task(db.actor, "new")
end

local scopeUsed
-----------------------------------UPDATE-------------------------------------------
function actor_binder:update(delta)
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("Bind STALKER: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] delta <<<<["..utils.to_str(delta).."]>>>>")
	end
	if _g.is_disconnecting then return end
	amk.oau_watchdog=900												-----------------900
	--------------------establish time and delta time---------------------------------------
	-- delta is ms between updates, internally limited to 1sec
	-- 10 is a great machine, 60 is near unplayable, 100 (1/10 sec) causes staggers
	-- delta is prevented from going less than 1ms for slice_base calculations
	-- less important services start getting skipped if delta is greater than 20,30,40,50
	----------------------------------------------------------------------------------------
	time_now = time_global()
	--if delta < 1 then delta = 1 end										--prevent 0 at start
	if TB3D_Modders.Global_Debug then
		slice_base = 1
	elseif delta < delta_lowest then
		slice_base = 1
	elseif delta < delta_low then
		slice_base = 2
	elseif delta < delta_moderate then
		slice_base = 3
	elseif delta < delta_high then
		slice_base = 4
	else	--delta critical
		slice_base = 5
	end
	if not last_time then												--init vars
		last_time = time_now											--force all to start
		scopeUsed = false
		upd_timeSCP = slice_base										--force all to init on start
		upd_timeMUS = slice_base
		upd_timeMED = slice_base
		upd_timeENV = slice_base
		upd_timeARC = slice_base
		upd_timeSAK = slice_base
		upd_timeAEM = slice_base
		upd_timeTSK = slice_base
		upd_timePSY = slice_base
		upd_timeRAD = slice_base
		upd_timeOAL = slice_base
		upd_timeANM = slice_base
		upd_timeWEP = slice_base
		upd_timeDOC = slice_base
		upd_timeBLW = slice_base		
		upd_timeFSS = slice_base		
		upd_timeART = slice_base		
		upd_timeGMS = slice_base		
		upd_timeCMP = slice_base	--109950
		upd_timeRST = slice_base	
		upd_timeNET = slice_base	
		upd_timeKEY = slice_base	
		upd_timeFTL = slice_base	
	end
	if TB3D_Modders.use_slice_message then 
		TB3D_Services.packet_alert("BSTALK: actor_update time_global["..utils.to_str(time_now).."] slice_base["..utils.to_str(slice_base).."]")
	end
	amk.oau_watchdog=899													-----------------899
	object_binder.update(self, delta)
	amk.oau_watchdog=898 													-----------------898 
	if self.bCheckStart then
		amk.oau_watchdog=897												-----------------897
		if TB3D_bsu_start then TB3D_bsu_start.update(delta, self.object, time_now) end	-- modders interface
		if not has_alife_info("storyline_actor_start") and (level.name() == "l01_escape") then
			self.object:give_info_portion("storyline_actor_start")
			_G.g_start_avi = true
		end
		if not has_alife_info("global_dialogs") then
		  self.object:give_info_portion("global_dialogs")
		end
		--if not has_alife_info("level_changer_icons") then
		  --self.object:give_info_portion("level_changer_icons")
		--end
		--TB3D_spots.set_spots()
		--level_tasks.add_lchanger_location()
		self.bCheckStart = false    
	end
	hidden_slots.on_update()
	inventory.update() 
	amk.oau_watchdog=896						-- Update hiding weapons	-----------------896
	if self.object:is_talking() then hide_weapon() end
	if weapon_hide == true then
		if self.weapon_hide == false then
			self.object:hide_weapon()
			self.weapon_hide = true
		end
	elseif self.weapon_hide == true then	--false so see if actor is hiding weapon
		self.object:restore_weapon()
		self.weapon_hide = false
	end
	amk.oau_watchdog=895				-- Update off the keyboard	-----------------895
	if TB3D_Services.remove_info("tb3d_restore_input") then
			level.enable_input()
			self.st.disable_input_time = nil
	elseif self.st.disable_input_time ~= nil
		and game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle then
			level.enable_input()
			self.st.disable_input_time = nil
	end
	amk.oau_watchdog=894 													-----------------894 
	scopeUsed = TB3D_Shaders.digital_zoom()
	amk.oau_watchdog=893 													-----------------893 
	if has_alife_info("tb3d_bioradar_on") and not scopeUsed then biodetector.update() else biodetector.biodetectorRemove() end
	amk.oau_watchdog=892 													-----------------892 
	sak.show_time(scopeUsed, slice_base)
	amk.oau_watchdog=891 													-----------------891 
	if TB3D_Services.is_collector() then
		--future use
	else
		sak.nepis_umer()												-----------------820, moved here as affects task manager
		braad_test.check_dead()
		wawka.check_the_dead()
	end
	--====================================================slice based actions===============================================
	if upd_timeNET < time_now then
		amk.oau_watchdog=9999												-----------------9999
		upd_timeNET = time_now + (upd_time_NET * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - NET["..utils.to_str(upd_timeNET).."]") end
		--local sdate, stime, newpacket = tb3d_net_manager.network_pole()
		--if sdate then TB3D_Services.packet_alert("net recieve: ["..sdate.."_"..stime.."_"..newpacket.."]") end
	end
	if upd_timeTSK < time_now then
		amk.oau_watchdog=890												-----------------890
		upd_timeTSK = time_now + (upd_time_TSK * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - TSK["..utils.to_str(upd_timeTSK).."]") end
		if TB3D_bsu_updT then TB3D_bsu_updT.update(delta, self.object, time_now) end	-- modders interface
		task_manager.actor_update()
	end
	if self.next_restrictors_update_time < time_now then
		amk.oau_watchdog=886												-----------------886
		bind_restrictor.actor_update(delta)
		self.next_restrictors_update_time = time_now + 500
	end
	if upd_timeRST < time_now then
		--if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("restrictors: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."]") end
		amk.oau_watchdog=880						-- Update restrictors	-----------------880
		upd_timeRST = time_now + (upd_time_RST * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - RST["..utils.to_str(self.next_restrictors_update_time).."]") end
		bind_mteleport.actor_update(delta)								-- Update our teleport (Kostya_level)
		if TB3D_bsu_updR then TB3D_bsu_updR.update(delta, self.object, time_now) end	-- modders interface		
		--if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("restrictors: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done") end
	end
	if upd_timeSCP < time_now then
		amk.oau_watchdog=870												-----------------870  
		upd_timeSCP = time_now + (upd_time_SCP * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - SCP["..utils.to_str(upd_timeSCP).."]") end
		if TB3D_Modders.use_dual_weapons then dualweapon.main() end											-- Shooting with two hands
		if TB3D_bsu_updS then TB3D_bsu_updS.update(delta, self.object, time_now, scopeUsed) end			-- modders interface		
	end
	if upd_timeWEP < time_now then
		amk.oau_watchdog=860											-----------------860
		upd_timeWEP = time_now + (upd_time_WEP * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - WEP["..utils.to_str(upd_timeWEP).."]") end
		rx_wmgr.global_update(time_now) 								--weapon manager updates
		rx_addons.update(time_now) 
		rx_gl.update(time_now) 
		meceniy_wpn.on_actor_update()
		dmx_mod.wpn_explode_update()
		if TB3D_bsu_upd3 then TB3D_bsu_upd3.update(delta, self.object, time_now) end					-- modders interface		
	end
	if upd_timeSAK < time_now then
		amk.oau_watchdog=850												-----------------850
		upd_timeSAK = time_now + (upd_time_SAK * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - SAK["..utils.to_str(upd_timeSAK).."]") end
		if TB3D_Modders.invisible then meceniy_work.set_invisible() end
		if TB3D_Modders.hell == true then meceniy_in_hell.horrortime() end
		meceniy_outfit.on_actor_update()
		if TB3D_Modders.zombie == true then meceniy_work.mainw() end
		if TB3D_bsu_upd5 then TB3D_bsu_upd5.update(delta, self.object, time_now) end					-- modders interface		
	end
	if upd_timeMED < time_now then
		amk.oau_watchdog=840											--DMX MEDS--------840  
		upd_timeMED = time_now + (upd_time_MED * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - MED["..utils.to_str(upd_timeMED).."]") end
			dmx_medicines.update()
			TB3D_Services.show_medkits(scopeUsed)							-- Indicators of CP at Uhud
		end
	end
	if upd_timeBLW < time_now then
		amk.oau_watchdog=820											--blowout check, added 109932--------820  
		upd_timeBLW = time_now + (upd_time_BLW * slice_base)
		if slice_base < 3 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - BLW["..utils.to_str(upd_timeBLW).."]") end
			local bphase = amk.load_variable("blowout",-1)
			local hide = amk_mod.check_actor_hide()						--nil/0=full protect, >0=reduced protection, 1=not in hideout
			local helmet = hidden_slots.get_item_in_helmet_slot()
			local bt = amk_mod.blowout_type()
			local outfit = dmx_inv_weight_static.update()
			if TB3D_bstalk_upd_BLW and TB3D_bstalk_upd_BLW.update(delta, self.object, bphase, hide, outfit, helmet, bt) == true then	-- modders interface
				--skip SS hit
			elseif TB3D_Modders.blowout_rad_val > 0 then
				if bt == 0 and bphase > 2 and hide then
					TB3D_hit_styles.blowout_actor(hide, bphase, outfit, helmet)
				end
			end				
			amk.mod_call("blowout_phantoms")
			dmx_mod.blowout_wave()
		end
	end
	if upd_timeRAD < time_now then
		amk.oau_watchdog=830					--Display radiation	warning	-----------------830
		upd_timeRAD = time_now + (upd_time_RAD * slice_base)
		if slice_base < 3 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - RAD["..utils.to_str(upd_timeRAD).."]") end
			if self.object.radiation >= 0.7 then
				local hud = get_hud()
				local custom_static = hud:GetCustomStatic("cs_radiation_danger")
				if custom_static == nil then
				  hud:AddCustomStatic("cs_radiation_danger", true)
				  hud:GetCustomStatic("cs_radiation_danger"):wnd():SetTextST("st_radiation_danger")
				end
			else
				local hud = get_hud()
				local custom_static = hud:GetCustomStatic("cs_radiation_danger")
				if custom_static ~= nil then
				  hud:RemoveCustomStatic("cs_radiation_danger")
				end
			end
		end
	end
	if upd_timeDOC < time_now then
		amk.oau_watchdog=810											-----------------810
		upd_timeDOC = time_now + (upd_time_DOC * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - DOC["..utils.to_str(upd_timeDOC).."]") end
			if sleep_manager.is_sleep_active() and xr_conditions.actor_dead() then
				xr_logic.issue_event(db.actor, db.storage[db.actor:id()]["ar_sleep"], "update")
			end
			if self.st.sleep_relocate_time ~= nil
			and game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle then
				self.object:set_actor_position(self.st.sleep_relocate_point)
				local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
				self.object:set_actor_direction(dir:getH())
				self.st.sleep_relocate_time = nil
			end
			dmx_mod.hud_sleep_static(scopeUsed)
			doc_viewer.update()
			babah.update(delta)
			stco.update()
			if TB3D_bsu_upd4 then TB3D_bsu_upd4.update(delta, self.object, time_now) end				-- modders interface		
		end
	end
	if upd_timeARC < time_now then
		amk.oau_watchdog=800												-----------------800
		upd_timeARC = time_now + (upd_time_ARC * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - ARC["..utils.to_str(upd_timeARC).."]") end
		arc_main.actor_update(time_now)
		amk.mod_call("check_armor")
		if TB3D_bsu_upd1 then TB3D_bsu_upd1.update(delta, self.object, time_now) end					-- modders interface		
	end
	if upd_timeMUS < time_now then
		amk.oau_watchdog=790	 											-----------------790 
		upd_timeMUS = time_now + (upd_time_MUS * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - MUS["..utils.to_str(upd_timeMUS).."]") end
			xr_giditara.guitar_update()
			xr_garmon.garmoshka_update()
			xr_smoking.smoking_update(delta)
			player_ogg.update()
			xr_racya.radio_update()
			amk.mod_call("interactive_music")
			if TB3D_bsu_updM then TB3D_bsu_updM.update(delta, self.object, time_now) end			-- modders interface	
		end
	end
	if upd_timeAEM < time_now then
		amk.oau_watchdog=780						--- ARENA_EXTENSION_MOD -----------------780
		upd_timeAEM = time_now + (upd_time_AEM * slice_base)
		if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - AEM["..utils.to_str(upd_timeAEM).."]") end
		aem_manager.get_aem():update()
		if TB3D_bsu_aem then TB3D_bsu_aem.update(delta, self.object, time_now) end				-- modders interface	
	end
	if upd_timePSY < time_now then
		amk.oau_watchdog=770						-- Update PSI antenna	-----------------770
		upd_timePSY = time_now + (upd_time_PSY * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - PSY["..utils.to_str(upd_timePSY).."]") end
			if sr_psy_antenna.psy_antenna then sr_psy_antenna.psy_antenna:update(delta) end
			amk.mod_call("check_radar_off")			--removed killactor and just reduce health by 0.01
		end
	end
	if upd_timeENV < time_now then
		amk.oau_watchdog=760												-----------------760
		upd_timeENV = time_now + (upd_time_ENV * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - ENV["..utils.to_str(upd_timeENV).."]") end
			TB3D_Services.env_update()
			if TB3D_bsu_upd0 then TB3D_bsu_upd0.update(delta, self.object, time_now) end				-- modders interface	
		end
	end
	if upd_timeANM < time_now then
		amk.oau_watchdog=750											-----------------750
		upd_timeANM = time_now + (upd_time_ANM * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - ANM["..utils.to_str(upd_timeANM).."]") end
			amk_anoms.update()
			if TB3D_bsu_anom then TB3D_bsu_anom.update(delta, self.object, time_now) end				-- modders interface	
		end
	end
	if upd_timeFSS < time_now then
		amk.oau_watchdog=740											-----------------740
		upd_timeFSS = time_now + (upd_time_FSS * slice_base)
		if slice_base < 3 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - FSS["..utils.to_str(upd_timeFSS).."]") end
			TB3D_Services.actor_update(self.object, delta, time_now)
		end
	end
	if upd_timeOAL < time_now then
		amk.oau_watchdog=730											-----------------730
		upd_timeOAL = time_now + (upd_time_OAL * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - OAL["..utils.to_str(upd_timeOAL).."]") end
			if TB3D_bsu_oal and TB3D_bsu_oal.update(delta, self.object, time_now) == true then				-- modders interface	
				--skip SS
			else
				if TB3D_Modders.use_offline_alife then amk_offline_alife.update() end									--updates offline alife actions
			end
			braad_test.grib_respawn()
		end
	end
	if upd_timeART < time_now then
		amk.oau_watchdog=720											-----------------720
		upd_timeART = time_now + (upd_time_ART * slice_base)
		if slice_base < 3 then
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - ART["..utils.to_str(upd_timeART).."]") end
			meceniy_art.on_actor_update()
			if TB3D_bsu_art then TB3D_bsu_art.update(delta, self.object, time_now) end				-- modders interface	
		end
	end
	if upd_timeGMS < time_now then
		amk.oau_watchdog=710											-----------------710
		upd_timeGMS = time_now + (upd_time_GMS * slice_base)
		if slice_base < 2 then
			if TB3D_Modders.log_game_stats == true then game_stats.update(delta, self.object, time_now) end
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - GMS["..utils.to_str(upd_timeGMS).."]") end
		end
	end
	if upd_timeCMP < time_now then
		amk.oau_watchdog=705											-----------------705				--109950 ogse companions
		upd_timeCMP = time_now + (upd_time_CMP * slice_base)
		if slice_base < 3 then
			if TB3D_Services.is_collector() then xr_companion.reset_enemy_by_time() end
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - CMP["..utils.to_str(upd_timeCMP).."]") end
		end
	end
	if upd_timeKEY < time_now then
		amk.oau_watchdog=700											-----------------700
		upd_timeKEY = time_now + (upd_time_KEY * slice_base)
		if slice_base < 2 then
			db.check_car_fix()
			keylogger.update()		-- dAVROs  109950
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - KEY["..utils.to_str(upd_timeKEY).."]") end
		end
	end
	if upd_timeFTL < time_now then
		amk.oau_watchdog=700											-----------------700
		upd_timeFTL = time_now + (upd_time_FTL * slice_base)
		if slice_base < 4 then
			if TB3D_Services.fell_through_level(db.actor:position()) then
				TB3D_Services.jump_to_safe_spot()
			end
			if TB3D_Modders.use_slice_message then TB3D_Services.packet_alert("BSTALK: actor_update - FTL["..utils.to_str(upd_timeFTL).."]") end
		end
	end
	--===============================================end slice based actions===============================================
	--TB3D_Services.info_alert("Bind_Stalker actor_update slices done")
	if post_process ~= 0 then
		amk.oau_watchdog=690			-- Update post process			-----------------690
		if post_process:update() == true then
		   post_process = 0
		end
		if TB3D_bsu_postp then TB3D_bsu_postp.update(delta, self.object, time_now, post_process) end				-- modders interface		
	end
	amk.oau_watchdog=680												-----------------680  
	if TB3D_bsu_predmx then TB3D_bsu_predmx.update(delta, self.object, time_now) end					-- modders interface		
	dmx_mod.dmx_update(delta)
	if TB3D_Services.is_collector() == true then
		amk.oau_watchdog=670											-----------------670
		TB3D_Collector.update(time_now, slice_base)
	else
		amk.oau_watchdog=660												-----------------660
		braad_test.actor_update()											--TB3D 10984
	end
	art_hit.update()
	amk.oau_watchdog=650												-----------------650
	amk.on_actor_update(delta)
	--amk.oau_watchdog=640												-----------------640
	amk.oau_watchdog=630												-----------------630
	gps_habar.on_actor_upade(delta) --idler++--
	--amk.oau_watchdog=620												-----------------620
	amk.oau_watchdog=610												-----------------610
    if TB3D_Modders.CopKeys == true then keylogger.update() end			-- New buttons
	amk.oau_watchdog=600												-----------------600  													-- $DreamMod  update schemes sleep
	if TB3D_Modders.use_xtrm_ai and xrs_ai then xrs_ai.actor_update(delta) end
    rx_shoot_enable.shoot_effect() 										-- The effect of firing
	amk.oau_watchdog=590												-----------------590
	bolt_ending.update() 												-- Ending bolts
	amk.oau_watchdog=580												-----------------580
	if TB3D_Services.remove_info("tb3d_force_weather") == true then
		self.weather_manager:force_weather()							-- after blowouts or env menu
	else
		self.weather_manager:update()									-- Weather Update
	end
	amk.oau_watchdog=570												-----------------570  
	self.actor_detector:update()										-- update circuit detector
	amk.oau_watchdog=560												-----------------560													-- by Monnoroch
	xr_sound.update_actor()												-- update sound scheme actor
	if self.warning then -- added by Red75. Control over the overflow	!!!!TB3D OVERFLOW ERROR WARNING 
		amk.oau_watchdog=550											-----------------550
		self.warning=nil
		get_hud():AddCustomStatic("hud_save_warning")
		local wnd=get_hud():GetCustomStatic("hud_save_warning"):wnd()
		if self.critical==1 then
		  wnd:SetTextST(game.translate_string("amk_warn_trans"))
		  self.critical=nil
		elseif self.critical==2 then
		  wnd:SetTextST(game.translate_string("amk_warn_trans_critical"))
		  self.critical=nil
		else
		  wnd:SetTextST(game.translate_string("amk_warn_attention"))
		end
		elseif self.wt and self.wt<time_now then
		self.wt=nil
		if get_hud():GetCustomStatic("hud_save_warning") then
		  get_hud():RemoveCustomStatic("hud_save_warning")
		end
	end
	if TB3D_bsu_last then TB3D_bsu_last.update(delta, self.object, time_now) end
	last_time = time_now												--save for next loop
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("Bind STALKER: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] <<<<done>>>>")
	end
	amk.oau_watchdog=0
end

-----------------------------------SAVE------------------------------------------------
function actor_binder:save(packet)
	if db.actor:alive() then
		if TB3D_Modders.use_packet_message then
			db.show_counts()
		end
		amk.on_game_save(obj)	-- TB3D 1098, just saves the active level name
		rx_ai.actor_save(packet)	--!!!!TB3D returns weapons to database
		local diff = self:save_old(packet)
		local psize = packet:w_tell()
		TB3D_Services.packet_alert("BSTALK["..utils.to_str(amk.load_variable("tb3d_version",0)).."] save, diff["..utils.to_str(diff).."] test psize["..utils.to_str(psize).."]")
		if psize>15000 then
			self.warning=true
			self.critical=2
			self.wt=time_global()+60000
			TB3D_Services.packet_alert("BSTALK: save, diff["..utils.to_str(diff).."] psize["..utils.to_str(psize).."] corrupted !!!!!!!!!!!!")
		elseif psize>7500 then
			self.warning=true
			self.critical=1
			self.wt=time_global()+60000
			TB3D_Services.packet_alert("BSTALK: save, diff["..utils.to_str(diff).."] psize["..utils.to_str(psize).."] critical !!!!!!!!!!!!")
		elseif psize>6000 then
			self.warning=true
			self.wt=time_global()+60000
			TB3D_Services.packet_alert("BSTALK: save, diff["..utils.to_str(diff).."] psize["..utils.to_str(psize).."] high !!!!")
		else
			self.wt=time_global()
			TB3D_Services.packet_alert("BSTALK: save, diff["..utils.to_str(diff).."] psize["..utils.to_str(psize).."] good")
		end
		self.is_saved = true
	else
		self.is_saved = false
	end
end

-----------------------------------------SAVE OLD FUNC------------------------------------
function actor_binder:save_old(packet)
	local diff = level.get_game_difficulty()+128
	if TB3D_Services.is_collector() == true then diff = diff+1 end
	object_binder.save(self, packet)		--calls timer_v.script to write variables before save
	packet:w_u8(diff)						--first item written
	--' Store data on disabled input
	if self.st.disable_input_time == nil then						--second, item written
		packet:w_bool(false)
	else
		if TB3D_Modders.use_packet_message then TB3D_Services.info_alert("BSTALK: using stored input time") end
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)			--possible third item
	end
	if TB3D_Modders.use_packet_message then							--grows as game progresses
		xr_logic.pstor_save_all_report(self.object, packet)
	else
		xr_logic.pstor_save_all(self.object, packet)
	end
	amk.oAmkLauncher:SaveData(self.object)		--active transmutator func if exists
	self.weather_manager:save(packet)
	sr_psy_antenna.save( packet )
	treasure_manager.save(packet)      
	task_manager.save(packet)
	self.actor_detector:save(packet)
	return diff
end

---------------------------------------LOAD---------------------------------------------------
function actor_binder:load(reader)
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK:  load") end
	object_binder.load(self, reader)				--loads save into buffer
	local isLoadTreasures = false
	local game_difficulty = reader:r_u8()			--first item
	--if TB3D_Modders.use_packet_message then TB3D_Services.packet_alert("BSTALK: difficulty level ["..game_difficulty.."]") end
	local collectr = false
	if game_difficulty > 127 then		--initial all.sav ??????
		game_difficulty = game_difficulty - 128		--set treasures
		isLoadTreasures = true
	end
	if game_difficulty < 0 then		--!!!!TB3D this should never happen, trap?
		game_difficulty = 0
		TB3D_Services.packet_alert("BSTALK: Load: diff less than zero["..self.object:name().."]")
	elseif game_difficulty > 3 then
		game_difficulty = 3
		collectr = true
	end
	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])
	if reader:r_eof() then								--should be input time next
		get_console():execute("load ~~~ BSTALK load: SAVE FILE IS CORRUPT !!!!!!!!!!!!!!!!!!!!!!!!!!!")
		get_console():execute("flush")
		get_console():execute("flush")
		get_console():execute("disconnect")
		get_console():execute("quit")
		self.stop()
	else
		local ntext = ""
		if collectr == true then
			ntext = game_difficulty_by_num[4]
		else
			ntext = game_difficulty_by_num[game_difficulty]
		end
		TB3D_Services.packet_alert("BSTALK load: "..ntext.." treasures["..utils.to_str(isLoadTreasures).."]")
		local stored_input_time = reader:r_u8()					--second item read
		if stored_input_time == true then
			self.st.disable_input_time = utils.r_CTime(reader)				--possible third item
			TB3D_Services.packet_alert("BSTALK: using stored input time")
		end
		if TB3D_Modders.use_packet_message then								--grows as game progresses
			xr_logic.pstor_load_all_report(self.object, reader)
		else
			xr_logic.pstor_load_all(self.object, reader)
		end
		amk.oAmkLauncher:LoadData(self.object)								--only if a func is active
		self.weather_manager:load(reader)									--always item
		sr_psy_antenna.load(reader)											--always item
		if isLoadTreasures == true then										--optional
			treasure_manager.load(reader)      
			if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BSTALK: treasure Manager Loaded") end
		end                                  
		task_manager.load(reader)											--always items, changes as game progresses
		self.actor_detector:load(reader)									--always item
	end
	--collectgarbage("collect")  --force a cleanup
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("BSTALK: Loaded") end
end
----------------------------------------------------------------------------------------------------------------------

--Start prefetch sounds
--if string_find(command_line(), "-noprefetch") == nil then				!!!!TB3D
--  sound_prefetch.prefetch_sounds()
--end


-- Weapon functions, called by cars, medicine and arhara in gameplay
function hide_weapon(is_required)									--moved here due to gameplay conflicts
	if is_required then
		weapon_hide = true
		TB3D_Services.give_info("hide_weapon_info")
		--TB3D_Services.info_alert("bind stalker: hide weapon: [forced]")
		--return true
	elseif TB3D_Modders.hide_weapon == true then
		weapon_hide = true
		TB3D_Services.give_info("hide_weapon_info")
		--TB3D_Services.info_alert("bind stalker: hide weapon: ["..utils.to_str(weapon_hide).."]")
		--return true
	else
		weapon_hide = false
	end
	return weapon_hide
end
function restore_weapon()
	--TB3D_Services.info_alert("bind stalker: restore weapon")
	if has_alife_info("hide_weapon_info") then
		weapon_hide = false
		TB3D_Services.remove_info("hide_weapon_info")
	end
end

-------------------------------------------ON USE------------------------------------------
function actor_binder:on_use_object(obj)
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("BSTALK: on use object") end
	if obj then
		if TB3D_Services.is_collector() then
			TB3D_Collector.on_use_object(obj)
		else
			TB3D_Stalker.on_use_object(obj)
		end
	end
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("BSTALK: on use object done") end
end


