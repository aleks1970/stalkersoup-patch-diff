--TB3D 1.0.9.9.1 
function my_ver() return "1.0.9.9.1" end
--[[-----------------------------------------------------------------------------------------------
 File           : ui_game_bulldozer.script
 Description    : BULLDOZER
 Copyright      : 2011 © Charsi
 Author         : Charsi
 Last edit      : 11.06.2011-28.06.2011
--]]-----------------------------------------------------------------------------------------------

local offsetx, offsety = 340, 240

class "m_static"
function m_static:__init(owner, x, y)
	self.x = x
	self.y = y
	self.owner = owner
	self.st = CUIStatic()
	self.st:Init("ui\\ui_game_bulldozer",offsetx+(x-1)*32,offsety+(y-1)*32,32,32)
end

class "bulldozer" (m_static)
function bulldozer:__init(owner, x, y) super(owner, x, y)
	self.st:SetOriginalRect(64,0,32,32)
end

function bulldozer:shift_down()
	self.st:SetOriginalRect(64,0,32,32)
	local f = 0
	for k, v in pairs(self.owner.wall) do if self.x == v.x and self.y + 1 == v.y then return end end
	for k, v in pairs(self.owner.rocks) do if self.x == v.x and self.y + 1== v.y then f = k break end end
	if f > 0 then
		if self.owner.rocks[f]:shift_down() then self.y = self.y + 1 self:set_pos() end
	else
		self.y = self.y + 1 self:set_pos()
	end
end

function bulldozer:shift_up()
	self.st:SetOriginalRect(64,32,32,32)
	local f = 0
	for k, v in pairs(self.owner.wall) do if self.x == v.x and self.y - 1 == v.y then return end end
	for k, v in pairs(self.owner.rocks) do if self.x == v.x and self.y - 1 == v.y then f = k break end end
	if f > 0 then
		if self.owner.rocks[f]:shift_up() then self.y = self.y - 1 self:set_pos() end
	else
		self.y = self.y - 1 self:set_pos()
	end
end

function bulldozer:shift_left()
	self.st:SetOriginalRect(0,64,32,32)
	local f = 0
	for k, v in pairs(self.owner.wall) do if self.x - 1 == v.x and self.y == v.y then return end end
	for k, v in pairs(self.owner.rocks) do if self.x - 1 == v.x and self.y == v.y then f = k break end end
	if f > 0 then
		if self.owner.rocks[f]:shift_left() then self.x = self.x - 1 self:set_pos() end
	else
		self.x = self.x - 1 self:set_pos()
	end
end

function bulldozer:shift_right()
	self.st:SetOriginalRect(32,64,32,32)
	local f = 0
	for k, v in pairs(self.owner.wall) do if self.x + 1 == v.x and self.y == v.y then return end end
	for k, v in pairs(self.owner.rocks) do if self.x + 1 == v.x and self.y == v.y then f = k break end end
	if f > 0 then
		if self.owner.rocks[f]:shift_right() then self.x = self.x + 1 self:set_pos() end
	else
		self.x = self.x + 1 self:set_pos()
	end
end

function bulldozer:set_pos()
	self.st:SetWndPos(offsetx+(self.x-1)*32,offsety+(self.y-1)*32)
	self.owner.cntr = self.owner.cntr + 1
	self.owner.cnt:SetText("Number of moves: "..self.owner.cntr)
end

class "rock" (m_static)
function rock:__init(owner, x, y) super(owner, x, y)
	self.st:SetOriginalRect(0,32,32,32)
end

function rock:shift_down()
	for k, v in pairs(self.owner.wall) do if self.x == v.x and self.y + 1 == v.y then return false end end
	for k, v in pairs(self.owner.rocks) do if self.x == v.x and self.y + 1 == v.y then return false end end
	self.y = self.y + 1 self.st:SetWndPos(offsetx+(self.x-1)*32,offsety+(self.y-1)*32)
	return true	
end

function rock:shift_up()
	for k, v in pairs(self.owner.wall) do if self.x == v.x and self.y - 1 == v.y then return false end end
	for k, v in pairs(self.owner.rocks) do if self.x == v.x and self.y - 1 == v.y then return false end end
	self.y = self.y - 1 self.st:SetWndPos(offsetx+(self.x-1)*32,offsety+(self.y-1)*32)
	return true	
end

function rock:shift_left()
	for k, v in pairs(self.owner.wall) do if self.x - 1 == v.x and self.y == v.y then return false end end
	for k, v in pairs(self.owner.rocks) do if self.x - 1 == v.x and self.y == v.y then return false end end
	self.x = self.x - 1 self.st:SetWndPos(offsetx+(self.x-1)*32,offsety+(self.y-1)*32)
	return true	
end

function rock:shift_right()
	for k, v in pairs(self.owner.wall) do if self.x + 1 == v.x and self.y == v.y then return false end end
	for k, v in pairs(self.owner.rocks) do if self.x + 1 == v.x and self.y == v.y then return false end end
	self.x = self.x + 1 self.st:SetWndPos(offsetx+(self.x-1)*32,offsety+(self.y-1)*32)
	return true	
end

class "fin" (m_static)
function fin:__init(owner, x, y) super(owner, x, y)
	self.st:SetOriginalRect(32,32,32,32)
end

class "wall" (m_static)
function wall:__init(owner, x, y) super(owner, x, y)
	self.st:SetOriginalRect(0,0,32,32)
end

local levels = {[1]={"cwwwwwwww","cwccccccw","wwcwwwwrw","wccccwccw","wcrccwbcw","wcrccrffw","wccccwffw","wccccwwww","wccccwccc","wwwwwwccc"},
[2]={"wwwwwwwwww","wccccwwwww","wcbrcwcffw","wccrrrcffw","wcccrccfww","wwwccwwwww","wwwwwwwwww"},
[3]={"wwwwwwww","wbcwwwww","wccccwww","wcwrccfw","wcrcrffw","wcrcfwww","wccwwwww","wwwwwwww"},
[4]={"wwwwwwwwww","wccccwcffw","wcrrcwcrfw","wccrcwccww","wwwccwcrww","wwwccbccww","wwwrcrrrww","wffrcwcffw","wffrcwcffw","wwwwwwwwww"},
[5]={"wwwwwwwwww","wffcwwcffw","wffcbcrffw","wwccwwcrww","wwwcwwrcww","wcrccrcrcw","wcrcwcrccw","wcccwccccw","wwwwwwwwww"},
[6]={"wwwwwwww","wwcbcccw","wwcrcccw","wwwcwccw","wfwcwccw","wfrccwcw","wfcccrcw","wwwwwwww"},
[7]={"wwwwwwwwwwww","wwcbcwccccww","wcrcffffrccw","wccrwwwwcrcw","wcccwwwwccww","wwwwwwwwwwww"},
[8]={"wwwwwww","wwwwccw","wwwwrcw","wwwffcw","wcrffcw","wcrwcbw","wcrcccw","wcccwww","wwwwwww"},
[9]={"wwwwwwwwww","wwwwccwcbw","wwwcccwccw","wwwrcrcrcw","wwwcrwwccw","wwwcrcwcww","wfffffccww","wwwwwwwwww"}}

class "puzzle" (CUIScriptWnd)
function puzzle:__init(organizer, num) super()
	self:Init(0,0,1024,768)
	self.btns = {}
	self.organizer = organizer
	self.ClosePda = function() self:OnExit() self.organizer:PdaQuit() end
	-- background
	self.back = CUIStatic()
	self.back:Init("ui\\amk_pda",0,0,1024,768)
	self:AttachChild(self.back)
	-- btn game exit
	self.btn_quit = CUIButton()
	self.btn_quit:Init("ui\\ui_pda_notepad",940,41,36,34)
	self.btn_quit:SetOriginalRect(271,773,36,34)
	self:Register(self.btn_quit, "btn_quit")
	self:AttachChild(self.btn_quit)
	self:AddCallback("btn_quit", ui_events.BUTTON_DOWN, self.OnExit, self)
	-- btn pda exit
	self.btn_close_pda = CUIButton()
	self.btn_close_pda:Init(320,0,65,20)
	self:Register(self.btn_close_pda, "btn_close_pda")
	self:AttachChild(self.btn_close_pda)
	self:AddCallback("btn_close_pda", ui_events.BUTTON_DOWN, self.ClosePda, self)
	-- bulldozer
	self.cnt = CUIButton()
	self.cnt:Init(offsetx+100,offsety-50,50,50)
	self.cnt:SetWindowName("btn_restart")
	self.cnt:SetText("Number of strokes: "..0)
	self.cnt:SetTextAlign(CGameFont.alCenter)
	self:AttachChild(self.cnt)
	self:AddCallback(self.cnt:WindowName(), ui_events.BUTTON_CLICKED, self.Restart, self)
	self.num = num or math.random(#levels)
	self.cntr = 0
	self.rocks = {}
	self.fin = {}
	self.wall = {}
	self:load_level(self.num)
end

function puzzle:Restart()
	level.start_stop_menu(puzzle(self.organizer, self.num), true)
	self:OnExit()
end

function puzzle:NextLevel()
	local l = #levels
	self.num = self.num + math.random(l)
	if self.num > l then self.num = self.num - l end
	self:Restart()
end

function puzzle:check_finish()
	local res = true
	local f = false
	for k, v in pairs(self.rocks) do
		f = false
		for k1, v1 in pairs(self.fin) do
			if v.x == v1.x and v.y == v1.y then f = true end
		end
		if not f then return false end
	end
	news_manager.send_tip(db.actor, "Puzzle solved "..self.cntr.." moves!", nil, "pda_icon", 10000)
	dmx_mod.play_sound([[device\pda\pda_game_win]])
	self:clear()
	self.num = math.random(#levels)
	self:Restart()
end

function puzzle:load_level(num)
	local lvl = levels[num]
	if lvl then
		self:clear()
		local lvlw = string.len(lvl[1])
		local s
		for posy, v in ipairs(lvl) do
			for posx = 1, lvlw do
				s = string.sub(v, posx, posx)
				if s == "w" then table.insert(self.wall, wall(self, posx,posy))
				elseif s == "r" then table.insert(self.rocks, rock(self, posx, posy))
				elseif s == "f" then table.insert(self.fin, fin(self, posx, posy))
				elseif s == "b" then self.bulldozer = bulldozer(self, posx, posy)
				end
			end
		end
		for k, v in pairs(self.fin) do self:AttachChild(v.st) end
		for k, v in pairs(self.wall) do self:AttachChild(v.st) end
		for k, v in pairs(self.rocks) do self:AttachChild(v.st) end
		self:AttachChild(self.bulldozer.st)
	end
end

function puzzle:clear()
	if self.bulldozer then
		self:DetachChild(self.bulldozer.st)
		for k, v in pairs(self.rocks) do self:DetachChild(v.st) end
		for k, v in pairs(self.fin) do self:DetachChild(v.st) end
		for k, v in pairs(self.wall) do self:DetachChild(v.st) end
		clear_table(self.rocks) clear_table(self.fin) clear_table(self.wall)
		self.cntr = 0
		self.cnt:SetText("Number of strokes: "..self.cntr)
	end
end

function puzzle:OnExit()
	level.start_stop_menu(self, true)
end

function puzzle:btn_down_clicked()
	self.bulldozer:shift_down()
	self:check_finish()
end

function puzzle:btn_up_clicked()
	self.bulldozer:shift_up()
	self:check_finish()
end

function puzzle:btn_left_clicked()
	self.bulldozer:shift_left()
	self:check_finish()
end

function puzzle:btn_right_clicked()
	self.bulldozer:shift_right()
	self:check_finish()
end

function puzzle:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnExit()
		end
		if dik == DIK_keys.DIK_1 or dik == DIK_keys.DIK_NUMPAD1 then
			self:load_level(1)
		elseif dik == DIK_keys.DIK_2 or dik == DIK_keys.DIK_NUMPAD2 then
			self:load_level(2)
		elseif dik == DIK_keys.DIK_3 or dik == DIK_keys.DIK_NUMPAD3 then
			self:load_level(3)
		elseif dik == DIK_keys.DIK_4 or dik == DIK_keys.DIK_NUMPAD4 then
			self:load_level(4)
		elseif dik == DIK_keys.DIK_5 or dik == DIK_keys.DIK_NUMPAD5 then
			self:load_level(5)
		elseif dik == DIK_keys.DIK_6 or dik == DIK_keys.DIK_NUMPAD6 then
			self:load_level(6)
		elseif dik == DIK_keys.DIK_7 or dik == DIK_keys.DIK_NUMPAD7 then
			self:load_level(7)
		elseif dik == DIK_keys.DIK_8 or dik == DIK_keys.DIK_NUMPAD8 then
			self:load_level(8)
		elseif dik == DIK_keys.DIK_9 or dik == DIK_keys.DIK_NUMPAD9 then
			self:load_level(9)
		end
		if dik == DIK_keys.DIK_DOWN then
			self:btn_down_clicked()
		elseif dik == DIK_keys.DIK_UP then
			self:btn_up_clicked()
		elseif dik == DIK_keys.DIK_LEFT then
			self:btn_left_clicked()
		elseif dik == DIK_keys.DIK_RIGHT then
			self:btn_right_clicked()
		elseif dik == DIK_keys.DIK_SPACE then
			self:Restart()
		elseif dik == DIK_keys.DIK_RETURN then
			self:NextLevel()
		end
	end
	return true
end
